//@version=5
strategy("UFC Strategy v17.1",calc_on_every_tick = false,calc_on_order_fills = false,max_labels_count = 500,initial_capital = 9000000,max_boxes_count = 500,max_lines_count = 500, overlay=true, margin_long=100, margin_short=100,process_orders_on_close = true)

string CONFLUENCE_FILTER     = 'Filter non significant internal structure breakouts'
BackgorundTx        = input.string("BG","Background Label",group = "Background")
TabPlace            = input.string("middle center","Background Position",["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],group = "Background")

var TFGroupName = "Time Frame Management" 
sym                 = input.symbol("DXY","Symbol",group = TFGroupName)
tfcs                = input.timeframe("15","Time Frame for Comparing Symbols",group = TFGroupName)
ITF                 = input.timeframe("5","Intermediate Time Frame",group = TFGroupName)
HTF                 = input.timeframe("15","Higher Time Frame",group = TFGroupName)
EEGroupName = "Entry Exit Rule Management"
ModeT               = input.bool(false,"NRT_AI_T Mode",inline = "ModT",group = EEGroupName)
ModeTtype           = input.string("NRT_AI_TSMS","",["NRT_AI_TSMS","NRT_AI_LSMS"],inline = "ModT",group = EEGroupName)    
ifilter_confluence  = true//input(false, 'Confluence Filter')
ModeL               = input.bool(false,"NRT_AI_L Mode",group = EEGroupName)

MagModeT            = input.bool(false,"NRT_AI_Trap Protection Mode_T",group = EEGroupName)
MagModeL            = input.bool(false,"NRT_AI_Trap Protection Mode_L",group = EEGroupName)
MagModeTL           = input.bool(false,"NRT_AI_Trap Protection Mode_L&T",group = EEGroupName)
MagTP               = input.float(1,"Trap Protection TP (RR)",group = EEGroupName)
UseSessionHighSwing = input.bool(true,"Use Valid Session High Swing",inline ="SSH",group = EEGroupName)
UseSessionLowSwing  = input.bool(true,"Use Valid Session Low Swing",inline ="SSL",group = EEGroupName)
UseHighSwing        = input.bool(true,"Use Valid Swing High",inline ="SWH",group = EEGroupName)
UseLowSwing         = input.bool(true,"Use Valid Swing Low",inline ="SWL",group = EEGroupName)
bgSHcolor           = input.color(color.blue,"",inline = "SSH",group = EEGroupName)
bgSLcolor           = input.color(color.rgb(222, 49, 99),"",inline = "SSL",group = EEGroupName)
bgSWHcolor          = input.color(color.aqua,"",inline = "SWH",group = EEGroupName)
bgSWLcolor          = input.color(color.orange,"",inline = "SWL",group = EEGroupName)


var TRGroupName1 ="Trade Management"
LongAllowed     = input.bool(true,"Long Allowed?",group = TRGroupName1)	
ShortAllowed    = input.bool(true,"Short Allowed?",group = TRGroupName1)	 
FVGVal          = input.string("Average of Both","FVG Value",["FVG Box Start Value","FVG Generation Price","Average of Both"],group = TRGroupName1)
FVGType         = input.string("Average","Use FVG for Entry",["First","Average","Last"],group = TRGroupName1)
FVGBuffer       = input.int(10,"FVG Buffer Points",group = TRGroupName1)
UseFreshFVG     = input.bool(false,"Use Fresh FVG Only",inline="Fresh",group = TRGroupName1)
FreshType       = input.string("Limit","",["Market","Limit"],"It will make an order when a new FVG is Detected",inline="Fresh",group = TRGroupName1)
var TRGroupName ="Risk Management"
QTYType         = input.string("Risk Per Trade","",["Risk Per Trade","Fixed Shares","Percentage of Capital"],inline = "AR",group = TRGroupName)
AmountAtRisk    = input.float(1000,"Value",tooltip = "choose the type with which the quantity should be calculated",group = TRGroupName,inline = "AR")
UseLots         = input.bool(true,"Use Lots instead of Units",group = TRGroupName)
// Shares          = input.float(10,"Lot Size / Contracts for Manual Calculation",1,group = TRGroupName)
var Shares = AmountAtRisk
// UseAmountAtRisk = input.bool(true,"",group = TRGroupName,inline = "AR")
UseDefend1      = input.bool(true,"",inline = "def1",group = TRGroupName)
Defend1         = input.int(2,"Defensive Risk per Trade (From 1st Loss) Divide by",tooltip = "Risk per trade will reset when Trade will close with Profit and Equity >= Initial Capital",inline = "def1",group = TRGroupName)
UseDefend2      = input.bool(true,"",inline = "def2",group = TRGroupName)
Defend2         = input.int(4,"Defensive Risk per Trade (From 2nd Loss Onwards) Divide by",tooltip = "Risk per trade will reset when Trade will close with Profit and Equity >= Initial Capital",inline = "def2",group = TRGroupName)
// RiskReward      = input.float(2, "Risk Reward Ratio",group = TRGroupName)	
TPType          = input.string("RR Ratio","Take Profit",["RR Ratio","Points","Amount"],inline = "TP",group = TRGroupName)
TPVal           = input.float(2,"",inline = "TP",group = TRGroupName)
Buffer          = input.int(20,"Buffer for SL",tooltip = "For Buy It will be Valid OB Bottom Line Less Buffer and For Sell It will be Valid Bearish OB Upper Line Plus Buffer",group = TRGroupName,inline = "SL")	
SLType          = input.string("Points" ,"", ["Points","Amount"],group = TRGroupName,inline = "SL")

UseBreakEven    = input.bool(false,"Move SL to BE Trigger at",inline = "BE",group = TRGroupName)
RRBE            = input.float(1,"",inline = "BE",group = TRGroupName)
RRBEType        = input.string("RR","",["Points","RR"],inline = "BE",group = TRGroupName)

BreakeEvenTicks = input.float(10,"Lock Profit in ",inline = "BE",group = TRGroupName)
BEType          = input.string("Points","",["Points","RR"],inline = "BE",group = TRGroupName)
UseTrailing         = input.bool(true,"Use Trailing Stop",group = TRGroupName)
TrailingSLTrigger1  = input.float(2,"Trailing SL 1 trigger profit (in RR)",tooltip = "When Profit Reaches to 5, This will trigger TSL1",group = TRGroupName)
TrailingLockin1     = input.float(1,"TSL1 Floating profit Lock-in %",tooltip = "TSL1 will lock 70 % of reached Profit so TSL1 = 7 and 3 will remain in Trailing",group = TRGroupName)
TrailingSLTrigger2  = input.float(4,"Trailing SL 2 trigger profit (in RR)",group = TRGroupName)
TrailingLockin2     = input.float(2,"TSL2 Floating profit Lock-in %",group = TRGroupName)
TrailingSLTrigger3  = input.float(6,"Trailing SL 3 trigger profit (in RR)",group = TRGroupName)
TrailingLockin3     = input.float(4,"TSL3 Floating profit Lock-in %",group = TRGroupName)
TrailingSLTrigger4  = input.float(8,"Trailing SL 4 trigger profit (in RR)",group = TRGroupName)
TrailingLockin4     = input.float(6,"TSL4 Floating profit Lock-in %",group = TRGroupName)
TrailingSLTrigger5  = input.float(12,"Trailing SL 5 trigger profit (in RR)",group = TRGroupName)
TrailingLockin5     = input.float(9,"TSL5 Floating profit Lock-in %",group = TRGroupName)


PnlGroup = "PnL Management"
UseDailyProfit      = input.bool(false,"",group = PnlGroup,inline = "Dprofit")
DailyProfit         = input.float(1000,"Max Allowed Profit Per Day",group = PnlGroup,inline = "Dprofit")
UseDailyLoss        = input.bool(false,"",group = PnlGroup,inline = "Dloss")
DailyLoss           = input.float(-100,"Max Allowed Loss Per Day",group = PnlGroup,inline = "Dloss")
tomaxallowed        = input.bool(false,"",inline = "mallow",group = PnlGroup)
MaxAllowedTrades    = input.int(10,"Max Allowed Trades per day",inline = "mallow",group = PnlGroup)


ColorGroup  = "Display Management"
ShowBarChange   = input.bool(true,"Show Bar Changes on Higher TF",group = ColorGroup)
OBoffset        = input.int(0,"Valid Swing OB offset",group = ColorGroup)
ShowHeading     = input.bool(true,"Show Heading",group = ColorGroup)
bgHcolor        = input.color(color.orange,"Valid High Candle color",group = ColorGroup)
bgLcolor        = input.color(color.aqua,"Valid Low Candle color",group = ColorGroup)

SHBoxcolor   = input.color(color.new(color.purple,80),"Bearish OB Box color",group = ColorGroup)
SLBoxcolor   = input.color(color.new(color.blue,80),"Bullish OB box color",group = ColorGroup)
SHTxtcolor   = input.color(color.purple,"Bearish OB text color",group = ColorGroup)
SLTxtcolor   = input.color(color.blue,"Bullish OB text color",group = ColorGroup)
TextSize     = input.string("auto","Text Size",["auto","tiny","small","normal","large","huge"],group = ColorGroup)
// Choose Instance Finding Entry Session (As per Selected Time Zone)	0:00
UseMonT             = input.bool(false,"",group = "Trading Sessions Management",inline = "MonT",display = display.none)
MonST1              = input.session("0000-0000","Custom Session",group = "Trading Sessions Management",inline = "MonT",display = display.none)
MonST2              = input.session("0000-0000","",group = "Trading Sessions Management",inline = "MonT",display = display.none)
MonST3              = input.session("0000-0000","",group = "Trading Sessions Management",inline = "MonT",display = display.none)
CstColor            = input.color(color.new(#00bcd4, 80),"Custom Session Color",group = "Trading Sessions Management",display = display.none)
//New York

Use_ny = input.bool(true,"Use NY for entry?", group = 'Trading Sessions Management')
showNy = input(true,   'New York', inline = 'ny', group = 'Trading Sessions Management')
nyCss  = input.color(color.new(#ff5d00, 80), '', inline = 'ny', group = 'Trading Sessions Management')

//London Open
Use_ldno = input.bool(true,"Use London open for entry?", group = 'Trading Sessions Management')
showLdno = input(true, 'London Open', inline = 'ldno', group = 'Trading Sessions Management')
ldnoCss  = input.color(color.new(#00bcd4, 80), '', inline = 'ldno', group = 'Trading Sessions Management')

//London Close
Use_ldnc = input.bool(true,"Use London close for entry?", group = 'Trading Sessions Management')
showLdnc = input(true, 'London Close', inline = 'ldnc', group = 'Trading Sessions Management')
ldncCss  = input.color(color.new(#2157f3, 80), '', inline = 'ldnc', group = 'Trading Sessions Management')

//Asian
Use_as      = input.bool(false,"Use Asian for entry?", group = 'Trading Sessions Management')
showAsia    = input(false, 'Asian', inline = 'asia', group = 'Trading Sessions Management')
asiaCss     = input.color(color.new(#e91e63, 80), '', inline = 'asia', group = 'Trading Sessions Management')
eos         = input.bool(true,"Exit Pending Orders out of Selected Session",group = "Trading Sessions Management")
ceos        = input.bool(false,"Exit Positions out of Selected Session",group = "Trading Sessions Management")
//Alerts 
AlertGB = "Alerts"
ValSessHAl   = input.bool(true,"Enable Valid Session High Swing Alert",group = AlertGB)
ValSessH    = input.text_area("Valid Session High Swing Bearish OB Generated","Valid Session High Swing",group = AlertGB)

ValSessLAl   = input.bool(true,"Enable Valid Session Low Swing Alert",group = AlertGB)
ValSessL    = input.text_area("Valid Session Low Swing Bullish OB Generated","Valid Session Low Swing",group = AlertGB)

ValSwHAl   = input.bool(true,"Enable Valid Swing High Alert",group = AlertGB)
ValSwH      = input.text_area("Valid Swing High Bearish OB Generated","Valid Swing High ",group = AlertGB)

ValSwLAl   = input.bool(true,"Enable Valid Swing Low Alert",group = AlertGB)
ValSwL      = input.text_area("Valid Swing Low Bullish OB Generated","Valid Swing Low ",group = AlertGB)


BuyOrder    = input.text_area("Buy Limit Order Triggered and Buy Trade Executed","Buy Order ",group = AlertGB)
SellOrder   = input.text_area("Sell Limit Order Triggered and Sell Trade Executed","Sell Order ",group = AlertGB)
BuyExitOrder= input.text_area("Buy Exit Order Triggered","Buy Exit Order",group = AlertGB)
SellExitOrder= input.text_area("Sell Exit Order Triggered","Sell Exit Order",group = AlertGB)
// BuyMkt      = input.text_area("","Buy Market ",group = AlertGB)
// SellMkt     = input.text_area("","Sell Market ",group = AlertGB)
//FVG
show_fvg = true// input(true, 'Fair Value Gaps (FVG)'
//   , inline = 'fvg_css'
//   , group = 'Fair Value Gaps')

bull_fvg_css = input.color(#2157f3, ''
  , inline = 'fvg_css'
  , group = 'Fair Value Gaps')

bear_fvg_css = input.color(#ff1100, ''
  , inline = 'fvg_css'
  , group = 'Fair Value Gaps')

fvg_usewidth = input(false, 'Min Width'
  , inline = 'fvg_width'
  , group = 'Fair Value Gaps')

fvg_gapwidth = input.float(0, ''
  , inline = 'fvg_width'
  , group = 'Fair Value Gaps')

fvg_method = input.string('Points', ''
  , options = ['Points', '%', 'ATR']
  , inline = 'fvg_width'
  , group = 'Fair Value Gaps')

var fvg_extend =  -2


//----------------------------------------}
//Premium/Discount zones
//----------------------------------------{
show_sd = input(true, 'Premium/Discount Zones'
  , group = 'Premium & Discount Zones')
show_equl = input(true, 'show historical Equilibrium',inline = "equl"
  , group = 'Premium & Discount Zones')
equlcol=input(color.yellow, '',inline = "equl"
  , group = 'Premium & Discount Zones')
len = input.int(50, ''
  , minval = 10
  , inline = 'swings'
  , group = 'Real Time Swing Structure')

premium_css = input.color(#f23645, 'Premium Zone'
  , group = 'Premium & Discount Zones')

eq_css = input.color(#b2b5be, 'Equilibrium Zone'
  , group = 'Premium & Discount Zones')

discount_css = input.color(#089981, 'Discount Zone'
  , group = 'Premium & Discount Zones')
var og_extend = 0





isInSession(sessionTimes) =>
    not na(time(timeframe.period, sessionTimes)) and not (sessionTimes=="0000-0000")
//-----------------------------------------------------------------------------}
//Premium/Discount/Equilibrium zones
//-----------------------------------------------------------------------------{
var premium = box.new(na, na, na, na,xloc=xloc.bar_time
  , bgcolor = color.new(premium_css, 80)
  , border_color = na)
color TRANSP_CSS = #ffffff00
var premium_lbl = label.new(na, na,xloc=xloc.bar_time
  , text = 'Premium'
  , color = TRANSP_CSS
  , textcolor = premium_css
  , style = label.style_label_down
  , size = size.small)

var eq = box.new(na, na, na, na,xloc=xloc.bar_time
  , bgcolor = color.rgb(120, 123, 134, 80)
  , border_color = na)

var eq_lbl = label.new(na, na,xloc=xloc.bar_time
  , text = 'Equilibrium'
  , color = TRANSP_CSS
  , textcolor = eq_css
  , style = label.style_label_left
  , size = size.small)

var discount = box.new(na, na, na, na,xloc=xloc.bar_time
  , bgcolor = color.new(discount_css, 80)
  , border_color = na)

var discount_lbl = label.new(na, na ,xloc=xloc.bar_time
  , text = 'Discount'
  , color = TRANSP_CSS
  , textcolor = discount_css
  , style = label.style_label_up
  , size = size.small)

swings(length)=>
    var os = 0
    
    upper = ta.highest(length)
    lower = ta.lowest(length)

    os := high[length] > upper ? 0 : low[length] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[length] : 0
    btm = os == 1 and os[1] != 1 ? low[length] : 0

    [top, btm] 

getPremium()=>
    var trail_up = high, var trail_dn = low
    var top_y = 0., var top_x = 0
    var btm_y = 0., var btm_x = 0
    var itop_y = 0., var itop_x = 0
    var ibtm_y = 0., var ibtm_x = 0
    var top_cross = true,  var btm_cross = true
    var itop_cross = true, var ibtm_cross = true
    var trend = 0, var itrend = 0
    // var trail_up_x = 0,  var trail_dn_x = 0
    [top, btm] = swings(len)
    
    if(top!=0)
        trail_up := top
        top_x := time[len]
        top_y := top
    trail_up := math.max(high, trail_up)

    if(btm != 0)
        trail_dn := btm
        btm_x := time[len]
        btm_y := btm
    trail_dn := math.min(low, trail_dn)
    //Detect bullish Structure
    if ta.crossover(close, top_y) and top_cross
        top_cross := false
        trend := 1
    //-----------------------------------------------------------------------------}
    //Pivot Low BOS/CHoCH
    //-----------------------------------------------------------------------------{

    //Detect bearish Structure
    if ta.crossunder(close, btm_y) and btm_cross
        btm_cross := false
        trend := -1


    [trail_up,trail_dn,top_x, btm_x]
getTrend()=>
    var trail_up = high, var trail_dn = low
    var top_y = 0., var top_x = 0
    var btm_y = 0., var btm_x = 0
    var itop_y = 0., var itop_x = 0
    var ibtm_y = 0., var ibtm_x = 0
    var top_cross = true,  var btm_cross = true
    var itop_cross = true, var ibtm_cross = true
    var trend = 0, var itrend = 0
    // var trail_up_x = 0,  var trail_dn_x = 0
    [top, btm] = swings(len)
    [itop, ibtm] = swings(5)
    var bull_concordant = true

    if ifilter_confluence
        bull_concordant := high - math.max(close, open) > math.min(close, open - low)
    if(top!=0)
        top_cross := true
        trail_up := top
        top_x := time[len]
        top_y := top
        
    trail_up := math.max(high, trail_up)

    if itop != 0
        itop_cross := true

        itop_y := itop
    if(btm != 0)
        btm_cross := true
        trail_dn := btm
        btm_x := time[len]
        btm_y := btm
    trail_dn := math.min(low, trail_dn)

    if ibtm != 0
        ibtm_cross := true
        ibtm_y := ibtm


    //Detect internal bullish Structure
    if ta.crossover(close, itop_y) and itop_cross and top_y != itop_y and bull_concordant
        itop_cross := false
        itrend := 1

    //Detect bullish Structure
    if ta.crossover(close, top_y) and top_cross
        top_cross := false
        trend := 1
    //-----------------------------------------------------------------------------}
    //Pivot Low BOS/CHoCH
    //-----------------------------------------------------------------------------{
    var bear_concordant = true

    if ifilter_confluence
        bear_concordant := high - math.max(close, open) < math.min(close, open - low)

    //Detect internal bearish Structure
    if ta.crossunder(close, ibtm_y) and ibtm_cross and btm_y != ibtm_y and bear_concordant
        ibtm_cross := false
        itrend := -1
    //Detect bearish Structure
    if ta.crossunder(close, btm_y) and btm_cross
        btm_cross := false
        trend := -1

    (ModeTtype=="NRT_AI_TSMS"?itrend:trend)

var toDefend1=false,var toDefend2 = false   

n = bar_index
[trail_up,trail_dn,top_x, btm_x] = request.security(syminfo.tickerid,HTF,getPremium(),lookahead = barmerge.lookahead_on)
trend = request.security(syminfo.tickerid,ITF,getTrend(),lookahead = barmerge.lookahead_on)

if show_sd
    avg = math.avg(trail_up, trail_dn)

    box.set_lefttop(premium, math.max(top_x, btm_x), trail_up)
    box.set_rightbottom(premium, time, .95 * trail_up + .05 * trail_dn)

    label.set_xy(premium_lbl, int(math.avg(math.max(top_x, btm_x), time)), trail_up)

    box.set_lefttop(eq, math.max(top_x, btm_x), .525 * trail_up + .475*trail_dn)
    box.set_rightbottom(eq, time, .525 * trail_dn + .475 * trail_up)

    label.set_xy(eq_lbl, time, avg)
    
    box.set_lefttop(discount, math.max(top_x, btm_x), .95 * trail_dn + .05 * trail_up)
    box.set_rightbottom(discount, time, trail_dn)
    label.set_xy(discount_lbl, int(math.avg(math.max(top_x, btm_x), time)), trail_dn)

GetQTY(float size)=>
    float qt = switch(QTYType)
        "Risk Per Trade"=>math.abs(AmountAtRisk/(syminfo.pointvalue * size))
        "Fixed Shares"=>AmountAtRisk
        => math.abs(AmountAtRisk*strategy.initial_capital/(100*syminfo.pointvalue * size))
    if(toDefend2)
        qt:= qt/Defend2
    else if(toDefend1)
        qt:= qt/Defend1
    var prs = syminfo.pricescale
    // qt := 39
    qt:=math.floor(qt)
    if(UseLots)
        qt := math.floor(qt*100/prs)
        qt := qt/100  
            
    qt
    
// Mark Pass Fail Mark on Each Trade on Chart 
labels(session, css, txt)=>
    var label lbl = na
    var float max = na 
    var int anchor = na
    var get_css = color.rgb(color.r(css), color.g(css), color.b(css))

    if session and not session[1]
        max := high
        anchor := time
        
        lbl := label.new(anchor, max
          , txt
          , xloc.bar_time
          , color = #ffffff00
          , style = label.style_label_down
          , textcolor = get_css
          , size = size.small)
    
    if session
        max := math.max(high, max)

        label.set_x(lbl, int(math.avg(time, anchor)))
        label.set_y(lbl, max)

////////////////////////////
///Session Definition//////
//////////////////////////
ny        = time(timeframe.period, '0700-0900', 'UTC-5') != 0
ldn_open  = time(timeframe.period, '0200-0500', 'UTC-5') != 0
ldn_close = time(timeframe.period, '1000-1200', 'UTC-5') != 0
asian     = time(timeframe.period, '2000-0000', 'UTC-5') != 0
CustoSessEnable = (UseMonT and (isInSession(MonST1) or isInSession(MonST2)or isInSession(MonST3)))

InSession = (ny and Use_ny) or (ldn_open and Use_ldno) or (ldn_close and Use_ldnc) or (asian and Use_as) or CustoSessEnable

labels(ny and showNy, nyCss, 'New York')
labels(ldn_open and showLdno, ldnoCss, 'London Open')
labels(ldn_close and showLdnc, ldncCss, 'London Close')
labels(asian and showAsia, asiaCss, 'Asian')

bgcolor(ny and showNy ? nyCss : na, editable = false)
bgcolor(ldn_open and showLdno ? ldnoCss : na, editable = false)
bgcolor(ldn_close and showLdnc ? ldncCss : na, editable = false)
bgcolor(asian and showAsia ? asiaCss : na, editable = false)
bgcolor(CustoSessEnable ? CstColor : na, editable = false)
/////////////////////////
/////FVG////////////////
///////////////////////
//Detect imbalance and return count over time
atr = ta.atr(200)

imbalance_detection(show, usewidth, method, width, top, btm, condition)=>
    var is_width = true
    var count = 0

    if usewidth
        dist = top - btm

        is_width := switch method
            'Points' => dist > width
            '%' => dist / btm * 100 > width
            'ATR' => dist > atr * width

    is_true = show and condition and is_width
    count += is_true ? 1 : 0
    
    [is_true, count]
//Detect if bullish imbalance is filled and return count over time
bull_filled(condition, btm)=>
    var btms = array.new_float(0)
    var count = 0

    if condition
        array.unshift(btms, btm)
    
    size = array.size(btms)

    for i = (size > 0 ? size-1 : na) to 0
        value = array.get(btms, i)

        if low < value
            array.remove(btms, i)      
            count += 1 

    count

//Detect if bearish imbalance is filled and return count over time
bear_filled(condition, top)=>
    var tops = array.new_float(0)
    var count = 0
    
    if condition
        array.unshift(tops, top)
    
    size = array.size(tops)
    
    for i = (size > 0 ? size-1 : na) to 0
        value = array.get(tops, i)

        if high > value
            array.remove(tops, i)      
            count += 1 

    count

//-----------------------------------------------------------------------------}
//Fair Value Gaps
//-----------------------------------------------------------------------------{
//Bullish
[bull_fvg, bull_fvg_count] = imbalance_detection(
  show_fvg
  , fvg_usewidth
  , fvg_method
  , fvg_gapwidth
  , low
  , high[2]
  , low > high[2] and close[1] > high[2] )//and not (bull_og or bull_og[1]))

bull_fvg_filled = bull_filled(bull_fvg, high[2])

//Bearish
[bear_fvg, bear_fvg_count] = imbalance_detection(
  show_fvg
  , fvg_usewidth
  , fvg_method
  , fvg_gapwidth
  , low[2]
  , high
  , high < low[2] and close[1] < low[2])// and not (bear_og or bear_og[1]))

bear_fvg_filled = bear_filled(bear_fvg, low[2])

var bullL=array.new<line>(0), var bullbox = array.new<box>(0),var bullin = array.new<int>(0)
var bearL=array.new<line>(0), var bearbox = array.new<box>(0),var bearin = array.new<int>(0)
var line tempLL = na,var tempLI = 0,var box tempLB = na
var line tempSL = na,var tempSI = 0,var box tempSB = na


/////////////////////////
/////Check validity/////
///////////////////////

checkConditions15sym1()=>
    vhc = low[1]>low 
    vlc = high[1]<high 
    [vhc,vlc]
checkConditions15sym2()=>
    vhc = high[1]>high
    vlc = low[1]<low
    [vhc,vlc,bar_index,low]
// [high15,low15] = 
[vhc1,vlc1,index15,l1] = request.security(syminfo.tickerid,tfcs,checkConditions15sym2(),lookahead = barmerge.lookahead_on)
[vhc2,vlc2] = request.security(sym,tfcs,checkConditions15sym1(),lookahead = barmerge.lookahead_on)
// plotshape(vhc1)
// plotshape(vlc1,color = color.red)
validHigh = (vhc1 and vhc2 and InSession)
validLow = (vlc1 and vlc2 and InSession)

var SessHigh = 0., var SessLow = 100000000.
SessHigh := InSession?math.max(SessHigh,high):0.
SessLow := InSession?math.min(SessLow,low):10000000.

if bull_fvg and InSession and not UseFreshFVG //and false
    avg = math.avg(low, high[2])
    tempLL := line.new(n-2, avg, n + fvg_extend, avg, color = bull_fvg_css)
    tempLB := box.new(n-2, low, n + fvg_extend, high[2], border_color = na, bgcolor = color.new(bull_fvg_css, 80))
    tempLI := n
    bullbox.push(tempLB)
    bullL.push(tempLL)
    bullin.push(bar_index)
    
if bear_fvg and InSession and not UseFreshFVG
    avg = math.avg(low[2], high)
    tempSL := line.new(n-2, avg, n + fvg_extend, avg, color = bear_fvg_css)
    tempSB := box.new(n-2, low[2], n + fvg_extend, high, border_color = na, bgcolor = color.new(bear_fvg_css, 80))
    tempSI := n
    bearbox.push(tempSB)
    bearin.push(bar_index)
    bearL.push(tempSL)

var H15 = high,var L15 = low
var BH15 = 0,var BL15 = 0,var bt = 0
var line prevHl = na, var line prevLl = na
var bordHcolor = color.new(SHBoxcolor,0)
var bordLcolor = color.new(SLBoxcolor,0)
var fixBI = 0,var fixSI = 0
var HighStop = 100000.,var LowStop = 0.
changed = index15!=index15[1]
// bt := BL15-bar_index
// bgcolor(changed?color.red:na,bt)
itisrem = false

// if(not validHigh and not changed )
//     line.delete(prevHl)
//     prevHl := na
//     // bearbox.clear()
//     // bearL.clear()
// if(not validLow and not changed )
//     line.delete(prevLl)
//     prevLl := na
    // bullbox.clear()
    // bullL.clear()
    // itisrem := true

tick = syminfo.minmove/syminfo.pricescale
type Order
    box tp 
    box sl 
    // float ob
    bool islong
    bool isact

var orderbox = array.new<Order>(0)
var BullOB = array.new<float>(0)
var BearOB = array.new<float>(0)
var ImBuy = false, var ImSell = false
var OBL = 0., var OBH = 0.
var SLB = 0.,var TPB = 0.
var SLS = 0., var TPS = 0.
var isStxtL = false, var isStxtS = false
// var EnableLlimit = false,var EnableSlimit = false
var HOK =true,var LOK = true
MakeTPSL(float SL,float EP, int dir)=>
    // line.new(bar_index,0,bar_index,100000000,color = bgSLcolor,width = 10)
    var transpcol = color.new(color.red,100)
    var TP = 0.
    if(dir == 1)
        TP := EP +  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(EP-SL)))
        orderbox.push(Order.new(box.new(bar_index,TP,bar_index,EP,na,extend = extend.right,bgcolor = color.new(color.green,70))
           ,box.new(bar_index,EP,bar_index,SL,na,extend = extend.right,bgcolor = color.new(color.red,70)),true,false))

    else
        TP := EP -  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(SL-EP)))
        orderbox.push(Order.new(box.new(bar_index,EP,bar_index,TP,na,extend = extend.right,bgcolor = color.new(color.green,70)),
           box.new(bar_index,SL,bar_index,EP,na,extend = extend.right,bgcolor = color.new(color.red,70)),false,false))
    sll = SL
    tpp = TP
    label.new(time,tpp,"TP: "+str.tostring(tpp,format.mintick),xloc.bar_time,yloc.price,transpcol,dir==1?label.style_label_down:label.style_label_up,color.green,size.normal,text.align_right)
    label.new(time,sll,"SL: "+str.tostring(sll,format.mintick),xloc.bar_time,yloc.price,transpcol,dir==-1?label.style_label_down:label.style_label_up,color.red,size.normal,text.align_right)
    label.new(time,EP,"EP: "+str.tostring(EP,format.mintick) + "\nQTY: "+str.tostring(GetQTY(EP-SL),"#.##"),xloc.bar_time,yloc.price,transpcol,label.style_none,color.yellow,size.normal,text.align_left)


getFVGVal(box bbc,bool isbull)=>
    retval = 0.
    if(FVGVal == "Average of Both")
        retval := (bbc.get_top()+bbc.get_bottom())/2
    else if(FVGVal == "FVG Box Start Value" and isbull) or (FVGVal == "FVG Generation Price" and not isbull)
        retval := bbc.get_bottom()
    else 
        retval := bbc.get_top()
    retval

getTextSize(tsz)=>
    ssz = size.auto
    ssz:=switch(tsz)
        "auto"=>size.auto
        "tiny"=>size.tiny
        "small"=>size.small
        "normal"=>size.normal
        "large"=>size.large
        "hughe"=>size.huge
    ssz


if(changed)
    // 
    if(not validHigh[1])
        line.delete(prevHl)
        prevHl := na
    if(not validLow[1] )
        line.delete(prevLl)
        prevLl := na
    if(ShowBarChange and InSession)
        line.new(bar_index,0,bar_index,100000000)
    ImBuy := false
    ImSell := false
    if(not na(prevHl))
        ix = bar_index - prevHl.get_x1()
        bb = box.new(prevHl.get_x1(),high[ix],bar_index+OBoffset,low[ix],bordHcolor,bgcolor = SHBoxcolor,text_color = SHTxtcolor,text_valign = text.align_center,text_halign = text.align_center )
        txt = isStxtL?"Valid Session High Swing Bearish OB":"Valid Swingh High Bearish OB"
        if(ShowHeading) 
            box.set_text(bb,txt)
            box.set_text_size(bb,getTextSize(TextSize))
        // log.info("----------------------")
        if(ValSessHAl and isStxtL) or (ValSwHAl and not isStxtL)
            alert(isStxtL?ValSessH:ValSwH,alert.freq_once_per_bar)
        EP = 0.
        count = 0
        if(ShortAllowed)
            if(bearbox.size()>0 and not UseFreshFVG)
                thefirst = 0.
                for x = bearbox.size()-1 to 0
                    if(bearin.get(x)<=prevHl.get_x1())
                        break
                    bearbox.get(x).set_right(bar_index)
                    bearL.get(x).set_x2(bar_index)
                    thefirst := getFVGVal(bearbox.get(x),false)
                    EP+=thefirst
                    count+=1
                if(count == 0)
                    ImSell := true
                    BearOB.push(high[ix])
                    
                    if(FreshType == "Market")
                        SLS := high[ix] + (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                        OBH := high[ix]
                else
                    EP := EP/count
                    if(FVGType == "First")
                        EP := thefirst
                    else if(FVGType == "Last")
                        EP := getFVGVal(bearbox.last(),false)
                    // EnableSlimit := true
                    EP-=FVGBuffer*tick
                    MakeTPSL(high[ix] + (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,-1)
            else 
                ImSell := true
                BearOB.push(high[ix])
                
                if(FreshType == "Market")
                    SLS := high[ix] + (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                    OBH := high[ix]
            log.info("----------------------\n"+txt+"\nNon Mittigated Bearish FVG Zones : "+str.tostring(count)+"\nCurrent position size : "+str.tostring(strategy.position_size))
            
    if(not na(prevLl))
        ix = bar_index - prevLl.get_x1()
        bb =box.new(prevLl.get_x1(),high[ix],bar_index+OBoffset,low[ix],bordLcolor,bgcolor = SLBoxcolor,text_color = SLTxtcolor,text_valign = text.align_center,text_halign = text.align_center)
        txt = isStxtS?"Valid Session Low Swing Bullish OB":"Valid Swingh Low Bullish OB"
        if(ShowHeading)
            box.set_text(bb,txt)
            box.set_text_size(bb,getTextSize(TextSize))

        EP = 0.

        if(ValSessLAl and isStxtS) or (ValSwLAl and not isStxtS)
            alert(isStxtS?ValSessL:ValSwL,alert.freq_once_per_bar)
        if(LongAllowed)
            count = 0
            thefirst = 0.
            if(bullbox.size()>0 and not UseFreshFVG)
                for x = bullbox.size()-1 to 0
                    if(bullin.get(x)<=prevLl.get_x1())
                        break
                    bullbox.get(x).set_right(bar_index)
                    bullL.get(x).set_x2(bar_index)
                    thefirst := getFVGVal(bullbox.get(x),true)
                    EP+=thefirst
                    
                    count+=1
                if(count == 0)
                    ImBuy := true
                    BullOB.push(low[ix])

                    if(FreshType == "Market")
                        SLB := low[ix] - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                        OBL := low[ix] 
                else
                    EP := EP/count
                    if(FVGType == "First")
                        EP := thefirst
                    else if(FVGType == "Last")
                        EP := getFVGVal(bullbox.last(),true)
                    EP+=FVGBuffer*tick
                    // bullbox.clear()
                    MakeTPSL(low[ix] - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,1)
            else 
                ImBuy := true
                BullOB.push(low[ix])

                if(FreshType == "Market")
                    SLB := low[ix] - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                    OBL := low[ix] 
            log.info("----------------------\n"+txt+"\nNon Mittigated Bullish FVG Zones : "+str.tostring(count)+"\nCurrent position size : "+str.tostring(strategy.position_size))
            
    // bullbox.clear()
    // bearbox.clear()
    // bullL.clear()
    // bearL.clear()
    isStxtL := (UseSessionHighSwing and high[bar_index-BH15]>= SessHigh)            
    prevHl := close[bar_index-BH15]>open[bar_index-BH15] and InSession[bar_index-BH15] and HOK and
       ((UseSessionHighSwing and high[bar_index-BH15]>= SessHigh)or(UseHighSwing and high[bar_index-BH15]<SessHigh))?
       line.new(BH15,0,BH15,100000000,color = (UseSessionHighSwing and high[bar_index-BH15]>= SessHigh)?bgSHcolor:bgSWHcolor,width = 10):na
    isStxtS := (UseSessionLowSwing and low[bar_index-BL15]<= SessLow)
    prevLl := close[bar_index-BL15]<open[bar_index-BL15] and InSession[bar_index-BL15] and LOK and
       ((UseSessionLowSwing and low[bar_index-BL15]<= SessLow)or(UseLowSwing and low[bar_index-BL15]>SessLow))?
       line.new(BL15,0,BL15,100000000,color = (UseSessionLowSwing and low[bar_index-BL15]<= SessLow)?bgSLcolor:bgSWLcolor,width = 10):na
    H15 := 0.
    BH15:= bar_index
    L15 := 1000000000.
    BL15 :=bar_index
if(high >= OBH)
    ImBuy := false
if(low <= OBL)
    ImSell := false
if(high == H15)
    HOK:=false
if(low == L15)
    LOK:=false
if(high > H15)
    H15 := high
    BH15:= bar_index
    HOK := true
if(low < L15)
    L15 := low
    BL15 :=bar_index  
    LOK := true

if(eos and not InSession)
    if(orderbox.size()>0)
        for x = 0 to orderbox.size()-1
            orderbox.get(x).tp.set_extend(extend.none)
            orderbox.get(x).tp.set_right(bar_index)
            orderbox.get(x).sl.set_extend(extend.none)
            orderbox.get(x).sl.set_right(bar_index)
        orderbox.clear()
    BullOB.clear()
    BearOB.clear()
if(BullOB.size() > 0)
    shift = 0
    for y = 0 to BullOB.size()-1
        x = y-shift
        if(low <= BullOB.get(x))
            shift+=1
            BullOB.remove(x)
if(BearOB.size() > 0)
    shift = 0
    for y = 0 to BearOB.size()-1
        x = y-shift
        if(high >= BearOB.get(x))
            shift+=1
            BearOB.remove(x)
if(BullOB.size() > 0 and bull_fvg)
    v1 = low
    av = (low+high[2])/2
    v2 = high[2]
    tempLL := line.new(n-2, av, n, av, color = bull_fvg_css)
    tempLB := box.new(n-2, low, n, high[2], border_color = na, bgcolor = color.new(bull_fvg_css, 80))
    tempLI := n
    if(FreshType == "Limit")

        EP = FVGVal == "Average of Both"?av:(FVGVal == "FVG Box Start Value"?v2:v1)+FVGBuffer*tick

        MakeTPSL(BullOB.first()- (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,1)
    BullOB.remove(0)
if(BearOB.size() > 0 and bear_fvg)
    v1 = high
    av = (low[2]+high)/2
    v2 = low[2]
    tempSL := line.new(n-2, av, n, av, color = bear_fvg_css)
    tempSB := box.new(n-2, low[2], n, high, border_color = na, bgcolor = color.new(bear_fvg_css, 80))
    tempSI := n
    if(FreshType == "Limit")
        EP = FVGVal == "Average of Both"?av:(FVGVal == "FVG Box Start Value"?v2:v1)-FVGBuffer*tick
        MakeTPSL(BearOB.first()+ (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,-1)
    BearOB.remove(0)
// ValidSH = InSession and not na(HS) and close[SwingRange]>open[SwingRange] and (high[SwingRange] > SessHigh[SwingRange+1] or not UseSessionHighSwing)
// ValidSL = InSession  and not na(LS) and close[SwingRange]<open[SwingRange] and (low[SwingRange] < SessLow[SwingRange+1] or not UseSessionLowSwing)

barcolor(validHigh?bgHcolor:validLow?bgLcolor:na)
if(bearbox.size()>0)
    shift = 0
    for y = 0 to bearbox.size()-1
        x = y-shift
        temp = bearbox.get(x)
        if(high >= temp.get_top())
            if(temp.get_left() == temp.get_right())
                temp.delete()
                bearL.get(x).delete()
            bearbox.remove(x) 
            bearL.remove(x)
            bearin.remove(x)
            shift += 1
            itisrem :=true
if(bullbox.size()>0)
    shift = 0
    for y = 0 to bullbox.size()-1
        x = y-shift
        temp = bullbox.get(x)
        if(low <= temp.get_bottom())
            if(temp.get_left() == temp.get_right())
                temp.delete()
                bullL.get(x).delete()
            bullbox.remove(x) 
            bullL.remove(x)
            bullin.remove(x)
            shift += 1
            itisrem :=true

avgB = 0.
avgS = 10000000000.
var fixAvgS = 0.
var fixAvgB = 0.
//////////////////////////
////Entries//////////////
////////////////////////
ImSell  := BearOB.size() > 0
ImBuy   := BullOB.size() > 0 
var FixClosedTrades = 0
var fixDailyNet = 0.
if(dayofmonth(time)!=dayofmonth(time[1]))
    FixClosedTrades := strategy.closedtrades
    fixDailyNet := strategy.netprofit

EnableSlimit = false
EnableLlimit = false
var lastOindexB = -1
var lastOindexS = -1
if(orderbox.size()>0 )
    isthereact = false
    for x = 0 to orderbox.size()-1
        Order tmp = orderbox.get(x)
        if(tmp.isact)
            isthereact := true
            break
    shift = 0
    for y = 0 to orderbox.size()-1
        x = y - shift
        Order tmp = orderbox.get(x)
        // if(tmp.islong and high >=tmp.sl.get_top() and low<=tmp.sl.get_top()) or (not tmp.islong and high >=tmp.tp.get_top() and low<=tmp.tp.get_top())
        //     tmp.isact := true
        if ((tmp.isact and strategy.position_size ==0) or (tmp.islong and low <= tmp.sl.get_bottom()) or (not tmp.islong and high >= tmp.sl.get_top()))
            shift+=1
            tmp.tp.set_extend(extend.none)
            tmp.tp.set_right(bar_index)
            tmp.sl.set_extend(extend.none)
            tmp.sl.set_right(bar_index)
            orderbox.remove(x)
        else if(strategy.position_size == 0)
            if(tmp.islong and not ImBuy and not tmp.isact)
                EnableLlimit := true
                if(avgB < tmp.sl.get_top())
                    lastOindexB := x
                    avgB := tmp.sl.get_top()
                    SLB := tmp.sl.get_bottom()
                    TPB := tmp.tp.get_top()
            if(not tmp.islong and not ImSell  and not tmp.isact)
                EnableSlimit := true
                if(avgS > tmp.sl.get_bottom())
                    lastOindexS := x
                    avgS:= tmp.sl.get_bottom()
                    SLS := tmp.sl.get_top()
                    TPS := tmp.tp.get_bottom()
        if not isthereact and ((tmp.islong and low<=tmp.sl.get_top() and strategy.position_size > 0) or (not tmp.islong and high >=tmp.tp.get_top() and strategy.position_size<0))
            tmp.isact := true
            isthereact := true


TDNet = strategy.netprofit - fixDailyNet
var ismagB = false, var ismagS = false
strategy.cancel_all()
var MagSLS = 0.,var MagSLB = 0.
if((MaxAllowedTrades > strategy.closedtrades - FixClosedTrades or not tomaxallowed) and ( TDNet < DailyProfit or not UseDailyProfit ) and (TDNet > DailyLoss or not UseDailyLoss)) and strategy.position_size == 0
    avt = math.avg(trail_up,trail_dn)
    ep = math.min(close,avgB)
    con1 = (not ModeT or trend == 1)
    con2 = (not ModeL or ep <= avt ) 
    notcancel = false
    if(con1 and con2)
        if(strategy.position_size == 0)
            ismagS := false 
            if(ImBuy and bull_fvg and InSession and SLB<close and FreshType == "Market" and BullOB.size()>0) 
                BullOB.remove(0) 
                strategy.entry("Buy",strategy.long,GetQTY(close-SLB),comment = "FreshFVG Buy",alert_message = BuyOrder) 
                fixAvgB := close
                ImBuy := false
            else if(LongAllowed and EnableLlimit and avgB > SLB)
                strategy.entry("Buy",strategy.long,GetQTY(avgB-SLB),avgB,alert_message = BuyOrder)
                fixAvgB := avgB
            else 
                strategy.cancel("Buy")    
    else //if not(ImBuy and bull_fvg and InSession)
        if(high>=avgB and low <= avgB)
            log.info("---------------------")
            if(not con1)
                log.error("last Structure is Bearish ")
            if(not con2)
                log.error("Entry price is in Premium zone")
        if(avgB != 0) and ((MagModeTL and not con1 and not con2) or (MagModeT and not con1) or ( MagModeL and not con2))and strategy.position_size == 0
            strategy.entry("Sell",strategy.short,GetQTY(avgB-SLB),comment = "Magic Sell",stop = avgB,alert_message = SellOrder)
            MagSLS := avgB+(avgB-SLB)
            ismagS := true 
            notcancel := true 
        

        strategy.cancel("Buy")      
    ep := math.max(close,avgS)
    con1 := (not ModeT or trend == -1)
    con2 := (not ModeL or ep >= avt)
    if(con1 and con2) 
        if(strategy.position_size == 0)
            ismagB := false
            if(ImSell and bear_fvg and InSession and SLS > close and FreshType == "Market" and BearOB.size()>0)  
                BearOB.remove(0)
                strategy.entry("Sell",strategy.short,GetQTY(SLS-close),comment = "FreshFVG Sell",alert_message = SellOrder)     
                ImSell:=false             
                ismagS := false
                fixAvgS := close
            else if(ShortAllowed and orderbox.size()>0 and EnableSlimit and avgS < SLS)
                strategy.entry("Sell",strategy.short,GetQTY(SLS-avgS),avgS,alert_message = SellOrder)
                fixAvgS := avgS
            else if(not notcancel)
                strategy.cancel("Sell") 
    else// if not(ImSell and bear_fvg and InSession) 
        if(high>=avgS and low <= avgS)
            log.info("---------------------")
            if(not con1)
                log.error("last Structure is Bullish ")
            if(not con2)
                log.error("Entry price is in Discount zone") 
        if(avgS != 0) and ((MagModeTL and not con1 and not con2) or (MagModeT and not con1) or ( MagModeL and not con2))and strategy.position_size == 0
            strategy.entry("Buy",strategy.long,GetQTY(SLS-avgS),comment = "Magic Buy",stop = avgS,alert_message = BuyOrder)
            MagSLB := avgS-(SLS-avgS)
            ismagB := true
        if(not notcancel)
            strategy.cancel("Sell")                 
if(strategy.position_avg_price>=math.min(avgS[1],avgS) and strategy.position_size[1]==0)
    ismagS:=false
if(strategy.position_avg_price<=math.max(avgB[1],avgB) and strategy.position_size[1]==0)
    ismagB:=false
if(ismagS and strategy.position_size < 0 and lastOindexB != -1 and orderbox.size()>lastOindexB)
    Order tmp = orderbox.get(lastOindexB)
    tmp.tp.set_extend(extend.none)
    tmp.tp.set_right(bar_index)
    tmp.sl.set_extend(extend.none)
    tmp.sl.set_right(bar_index)
    orderbox.remove(lastOindexB)
    lastOindexB := -1

if(ismagB and strategy.position_size > 0 and lastOindexS != -1 and orderbox.size()>lastOindexS)
    Order tmp = orderbox.get(lastOindexS)
    tmp.tp.set_extend(extend.none)
    tmp.tp.set_right(bar_index)
    tmp.sl.set_extend(extend.none)
    tmp.sl.set_right(bar_index)
    orderbox.remove(lastOindexS)
    lastOindexS := -1


var ActivateBE = false
var barssinceentry = 0
Tp1 = 0., Sl1 = 0.

if(strategy.position_size == 0)
    ActivateBE := false 

else if(strategy.position_size[1]==0)
    barssinceentry := bar_index
tpp = 0.
sll = 0.

var ActivateTrail = 0
var TrailingPlace = 0.

if(strategy.position_size == 0)
    ActivateTrail := 0
    TrailingPlace := 0
else if(strategy.position_size > 0)
    avg = strategy.position_avg_price
    SL11 = ismagB?MagSLB:SLB
    RRsize = (avg - SL11)
    if(barssinceentry>bar_index)

        if(high > avg + RRsize*TrailingSLTrigger1 and ActivateTrail < 2)
            ActivateTrail := 1
        if(high > avg + RRsize*TrailingSLTrigger2 and ActivateTrail < 3)
            ActivateTrail := 2
        if(high > avg + RRsize*TrailingSLTrigger3 and ActivateTrail < 4)
            ActivateTrail := 3
        if(high > avg + RRsize*TrailingSLTrigger4 and ActivateTrail < 5)
            ActivateTrail := 4
        if(high > avg + RRsize*TrailingSLTrigger5 and ActivateTrail < 6)
            ActivateTrail := 5
    if(ActivateTrail > 0 and UseTrailing)
        Tplace=0.
        Tsize = high - avg
        if(ActivateTrail == 1)
            Tplace := avg + Tsize*TrailingLockin1/100
        if(ActivateTrail == 2)
            Tplace := avg + Tsize*TrailingLockin2/100
        if(ActivateTrail == 3)
            Tplace := avg + Tsize*TrailingLockin3/100
        if(ActivateTrail == 4)
            Tplace := avg + Tsize*TrailingLockin4/100
        if(ActivateTrail == 5)
            Tplace := avg + Tsize*TrailingLockin5/100
        TrailingPlace := TrailingPlace<Tplace?Tplace:TrailingPlace
else if(strategy.position_size < 0)
    avg = strategy.position_avg_price
    SL11 = ismagS?MagSLS:SLS
    RRsize = (SL11 - avg)
    if(barssinceentry>bar_index)
        if(low < avg - RRsize*TrailingSLTrigger1 and ActivateTrail < 2)
            ActivateTrail := 1
        if(low < avg - RRsize*TrailingSLTrigger2 and ActivateTrail < 3)
            ActivateTrail := 2
        if(low < avg - RRsize*TrailingSLTrigger3 and ActivateTrail < 4)
            ActivateTrail := 3
        if(low < avg - RRsize*TrailingSLTrigger4 and ActivateTrail < 5)
            ActivateTrail := 4
        if(low < avg - RRsize*TrailingSLTrigger5 and ActivateTrail < 6)
            ActivateTrail := 5
    if(ActivateTrail > 0 and UseTrailing)
        Tplace=0.
        Tsize = avg - low
        if(ActivateTrail == 1)
            Tplace := avg - Tsize*TrailingLockin1/100
        if(ActivateTrail == 2)
            Tplace := avg - Tsize*TrailingLockin2/100
        if(ActivateTrail == 3)
            Tplace := avg - Tsize*TrailingLockin3/100
        if(ActivateTrail == 4)
            Tplace := avg - Tsize*TrailingLockin4/100
        if(ActivateTrail == 5)
            Tplace := avg - Tsize*TrailingLockin5/100
        TrailingPlace := TrailingPlace>Tplace or TrailingPlace == 0?Tplace:TrailingPlace

var bool isTradeClosed = false
var string tradeSignalType = ''

handleTradeClosure(signalType, entryPrice, takeProfit, stopLoss, lossComment) =>
    var int entryBarIndex = na
    if (strategy.position_size != 0 and na(entryBarIndex))
        entryBarIndex := bar_index
    if (strategy.position_size == 0)
        entryBarIndex := na

    tradeProfit = strategy.netprofit // Net profit or loss
    profitStatus = tradeProfit > 0 ? "Profit" : "Loss" // Status of trade
    runUp = signalType == "Buy" ? (ta.highest(high, bar_index - entryBarIndex) - entryPrice) : (entryPrice - ta.lowest(low, bar_index - entryBarIndex))
    drawDown = signalType == "Buy" ? (entryPrice - ta.lowest(low, bar_index - entryBarIndex)) : (ta.highest(high, bar_index - entryBarIndex) - entryPrice)
    runUpPerc = runUp / entryPrice * 100
    drawDownPerc = drawDown / entryPrice * 100

    // Calculate Risk and Reward
    risk = math.abs(entryPrice - stopLoss) // Risk is the distance between entry and SL
    reward = math.abs(takeProfit - entryPrice) // Reward is the distance between entry and TP

    // Webhook JSON message
    jsonFormat = "{{\"SignalType\": \"{0}\", \"DateTime\": \"{1}\", \"EntryPrice\": \"{2}\", \"ProfitStatus\": \"{3}\", \"ProfitValue\": \"{4}\", \"RunUp\": \"{5}\", \"RunUpPercent\": \"{6}\", \"DrawDown\": \"{7}\", \"DrawDownPercent\": \"{8}\", \"TakeProfit\": \"{9}\", \"StopLoss\": \"{10}\", \"Risk\": \"{11}\", \"Reward\": \"{12}\", \"Comment\": \"{13}\"}}"
    message = str.format(jsonFormat, signalType, str.tostring(time, "yyyy-MM-dd HH:mm:ss"), str.tostring(entryPrice), profitStatus, str.tostring(tradeProfit), str.tostring(runUp), str.tostring(runUpPerc), str.tostring(drawDown), str.tostring(drawDownPerc), str.tostring(takeProfit), str.tostring(stopLoss), str.tostring(risk), str.tostring(reward), lossComment)

    // Trigger alert to send webhook
    alert(message, freq = alert.freq_once_per_bar)






if(strategy.position_size>0)
    // StL = LowStop - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
    // TpL = strategy.position_avg_price +  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(strategy.position_avg_price-StL)))
    StL = ismagB?MagSLB:(fixAvgB-(strategy.position_avg_price-SLB))
    EP  = strategy.position_avg_price
    TPVal1 = ismagB?MagTP:TPVal
    TpL = EP +  (TPType == "Points"?TPVal1*tick:(TPType=="Amount"?TPVal1/(syminfo.pointvalue*Shares):TPVal1*(EP-StL)))
    tpp := TpL
    sll := StL
    if(UseBreakEven and high > strategy.position_avg_price + (RRBEType=="RR"?RRBE*(strategy.position_avg_price-StL):RRBE*tick) and bar_index > barssinceentry)
        ActivateBE:=true
    if(ActivateBE)
        StL := EP+(BEType == "Points"?tick*BreakeEvenTicks:(EP-SLB)*BreakeEvenTicks)
    
    cmloss = ActivateBE?"Break Even":"Stop Loss"
    if(StL < TrailingPlace and TrailingPlace != 0)
        StL := TrailingPlace
        cmloss := "Trailing Stop"
    strategy.exit("LE","Buy",limit = TpL,stop = StL,comment_loss = cmloss,comment_profit = "Take Profit",alert_message = BuyExitOrder)
    if (strategy.position_size == 0 and not isTradeClosed)
        isTradeClosed := true
        tradeSignalType := "Buy"  // Set trade type for Buy positions
        // Call handleTradeClosure for Buy
        handleTradeClosure(tradeSignalType, EP, tpp, sll, cmloss)
    

if(strategy.position_size<0)
    // StL = temp.size()>0?SLBox.get(0).get_top():0
    // TpL = strategy.position_avg_price -  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(StL-strategy.position_avg_price)))
    StL = ismagS?MagSLS:(strategy.position_avg_price+(SLS-fixAvgS))
    EP = strategy.position_avg_price
    TPVal1 = ismagS?MagTP:TPVal
    TpL = EP -  (TPType == "Points"?TPVal1*tick:(TPType=="Amount"?TPVal1/(syminfo.pointvalue*Shares):TPVal1*(StL-EP)))
    tpp := TpL
    sll := StL
    if(UseBreakEven and low < strategy.position_avg_price - (RRBEType=="RR"?RRBE*(StL - strategy.position_avg_price):RRBE*tick) and bar_index > barssinceentry)
        ActivateBE:=true
    if(ActivateBE)
        StL := EP - (BEType=="Points"?tick*BreakeEvenTicks:(SLS-EP)*BreakeEvenTicks)
    
    cmloss = ActivateBE?"Break Even":"Stop Loss"
    if(StL > TrailingPlace and TrailingPlace != 0)
        StL := TrailingPlace
        cmloss := "Trailing Stop"
    strategy.exit("SE","Sell",limit = TpL,stop = StL,comment_loss = cmloss,comment_profit = "Take Profit",alert_message = SellExitOrder )
    if (strategy.position_size == 0 and not isTradeClosed)
        isTradeClosed := true
        tradeSignalType := "Sell"  // Set trade type for Sell positions
        // Call handleTradeClosure for Sell
        handleTradeClosure(tradeSignalType, EP, tpp, sll, cmloss)
    


if(ceos and not InSession and strategy.position_size != 0)
    strategy.close_all("Session end",alert_message = (strategy.position_size>0?BuyExitOrder:SellExitOrder))

plot(tpp,"Take Profit",tpp==0 or tpp[1] == 0?na:color.green,1)
plot(sll,"Stop Loss",sll==0 or sll[1] == 0?na:color.red,1)

plot(show_equl?math.avg(trail_up,trail_dn):na,"",equlcol) 



/////////////////////////
////Table///////////////
///////////////////////
var prevNet = 0., var Loss = 0,var LossAmount=0.,var CW=0,var CL=0,var maxCW=0,var maxCL=0
var pnlarr = array.new_bool(0)
if(strategy.netprofit > strategy.netprofit[1])
    CW+=1
    CL := 0
    pnlarr.push(true)
    if(strategy.netprofit>=0)
        toDefend1 := false
        toDefend2 := false
if(strategy.netprofit < strategy.netprofit[1])
    Loss+=1
    LossAmount+=strategy.netprofit-strategy.netprofit[1]
    toDefend1 := UseDefend1
    if(pnlarr.size()>0 and not toDefend2)
        toDefend2 := UseDefend2 and not pnlarr.last()
    pnlarr.push(false)
    CL+=1
    CW := 0
maxCL := math.max(maxCL,CL)
maxCW := math.max(maxCW,CW)

if(bar_index >= last_bar_index-1)
    var tab = table.new(position.top_right,3,12,na)
    var tabcolor = color.gray
    var TabPos = position.middle_center
    var decTab = true
    if(decTab)
        decTab := false 
        if(TabPlace=="top left")
            TabPos := position.top_left
        else if(TabPlace == "top center")
            TabPos := position.top_center
        else if(TabPlace == "top right")
            TabPos := position.top_right
        else if(TabPlace=="middle left")
            TabPos := position.middle_left
        else if(TabPlace == "middle center")
            TabPos := position.middle_center
        else if(TabPlace == "middle right")
            TabPos := position.middle_right
        else if(TabPlace=="bottom left")
            TabPos := position.bottom_left
        else if(TabPlace == "bottom center")
            TabPos := position.bottom_center
        else if(TabPlace == "bottom right")
            TabPos := position.bottom_right
    var bgtx = table.new(TabPos,1,1,na,na,na,na,na)
    bgtx.cell(0,0,BackgorundTx,20,20,color.gray,text.align_center,text.align_center,size.huge)
    table.cell(tab,0,0,"Symbol",text_color = tabcolor,text_halign = text.align_left ) 	
    table.cell(tab,0,1,"No of Trades",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,2,"Total Trade Closed",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,3,"Win Trade Count",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,4,"Loss Trade Count",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,5,"Win Rate %",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,6,"Net Profit",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,7,"Gross Profit",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,8,"Gross Loss",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,9,"Profit Factor",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,10,"Max Consecutive Win",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,11,"Max Consecutive Loss",text_color = tabcolor,text_halign = text.align_left ) 	

    table.cell(tab,1,0,syminfo.ticker,text_color = tabcolor,text_halign = text.align_left ) 	
    table.cell(tab,1,1,str.tostring(strategy.closedtrades),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,2,str.tostring(strategy.closedtrades),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,3,str.tostring(strategy.closedtrades-Loss),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,4,str.tostring(Loss),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,5,str.tostring(100*(strategy.closedtrades-Loss)/strategy.closedtrades,"#.##")+"%",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,6,str.tostring(strategy.netprofit,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,7,str.tostring(strategy.netprofit-LossAmount,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,8,str.tostring(LossAmount,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,9,str.tostring(-(strategy.netprofit-LossAmount)/LossAmount,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,10,str.tostring(maxCW),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,11,str.tostring(maxCL),text_color = tabcolor,text_halign = text.align_left ) 		

//@version=5
strategy("UFC Strategy v17.1",calc_on_every_tick = false,calc_on_order_fills = false,max_labels_count = 500,initial_capital = 9000000,max_boxes_count = 500,max_lines_count = 500, overlay=true, margin_long=100, margin_short=100,process_orders_on_close = true)

string CONFLUENCE_FILTER     = 'Filter non significant internal structure breakouts'
BackgorundTx        = input.string("BG","Background Label",group = "Background")
TabPlace            = input.string("middle center","Background Position",["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],group = "Background")

var TFGroupName = "Time Frame Management" 
sym                 = input.symbol("DXY","Symbol",group = TFGroupName)
tfcs                = input.timeframe("15","Time Frame for Comparing Symbols",group = TFGroupName)
ITF                 = input.timeframe("5","Intermediate Time Frame",group = TFGroupName)
HTF                 = input.timeframe("15","Higher Time Frame",group = TFGroupName)
EEGroupName = "Entry Exit Rule Management"
ModeT               = input.bool(false,"NRT_AI_T Mode",inline = "ModT",group = EEGroupName)
ModeTtype           = input.string("NRT_AI_TSMS","",["NRT_AI_TSMS","NRT_AI_LSMS"],inline = "ModT",group = EEGroupName)    
ifilter_confluence  = true//input(false, 'Confluence Filter')
ModeL               = input.bool(false,"NRT_AI_L Mode",group = EEGroupName)

MagModeT            = input.bool(false,"NRT_AI_Trap Protection Mode_T",group = EEGroupName)
MagModeL            = input.bool(false,"NRT_AI_Trap Protection Mode_L",group = EEGroupName)
MagModeTL           = input.bool(false,"NRT_AI_Trap Protection Mode_L&T",group = EEGroupName)
MagTP               = input.float(1,"Trap Protection TP (RR)",group = EEGroupName)
UseSessionHighSwing = input.bool(true,"Use Valid Session High Swing",inline ="SSH",group = EEGroupName)
UseSessionLowSwing  = input.bool(true,"Use Valid Session Low Swing",inline ="SSL",group = EEGroupName)
UseHighSwing        = input.bool(true,"Use Valid Swing High",inline ="SWH",group = EEGroupName)
UseLowSwing         = input.bool(true,"Use Valid Swing Low",inline ="SWL",group = EEGroupName)
bgSHcolor           = input.color(color.blue,"",inline = "SSH",group = EEGroupName)
bgSLcolor           = input.color(color.rgb(222, 49, 99),"",inline = "SSL",group = EEGroupName)
bgSWHcolor          = input.color(color.aqua,"",inline = "SWH",group = EEGroupName)
bgSWLcolor          = input.color(color.orange,"",inline = "SWL",group = EEGroupName)


var TRGroupName1 ="Trade Management"
LongAllowed     = input.bool(true,"Long Allowed?",group = TRGroupName1)	
ShortAllowed    = input.bool(true,"Short Allowed?",group = TRGroupName1)	 
FVGVal          = input.string("Average of Both","FVG Value",["FVG Box Start Value","FVG Generation Price","Average of Both"],group = TRGroupName1)
FVGType         = input.string("Average","Use FVG for Entry",["First","Average","Last"],group = TRGroupName1)
FVGBuffer       = input.int(10,"FVG Buffer Points",group = TRGroupName1)
UseFreshFVG     = input.bool(false,"Use Fresh FVG Only",inline="Fresh",group = TRGroupName1)
FreshType       = input.string("Limit","",["Market","Limit"],"It will make an order when a new FVG is Detected",inline="Fresh",group = TRGroupName1)
var TRGroupName ="Risk Management"
QTYType         = input.string("Risk Per Trade","",["Risk Per Trade","Fixed Shares","Percentage of Capital"],inline = "AR",group = TRGroupName)
AmountAtRisk    = input.float(1000,"Value",tooltip = "choose the type with which the quantity should be calculated",group = TRGroupName,inline = "AR")
UseLots         = input.bool(true,"Use Lots instead of Units",group = TRGroupName)
// Shares          = input.float(10,"Lot Size / Contracts for Manual Calculation",1,group = TRGroupName)
var Shares = AmountAtRisk
// UseAmountAtRisk = input.bool(true,"",group = TRGroupName,inline = "AR")
UseDefend1      = input.bool(true,"",inline = "def1",group = TRGroupName)
Defend1         = input.int(2,"Defensive Risk per Trade (From 1st Loss) Divide by",tooltip = "Risk per trade will reset when Trade will close with Profit and Equity >= Initial Capital",inline = "def1",group = TRGroupName)
UseDefend2      = input.bool(true,"",inline = "def2",group = TRGroupName)
Defend2         = input.int(4,"Defensive Risk per Trade (From 2nd Loss Onwards) Divide by",tooltip = "Risk per trade will reset when Trade will close with Profit and Equity >= Initial Capital",inline = "def2",group = TRGroupName)
// RiskReward      = input.float(2, "Risk Reward Ratio",group = TRGroupName)	
TPType          = input.string("RR Ratio","Take Profit",["RR Ratio","Points","Amount"],inline = "TP",group = TRGroupName)
TPVal           = input.float(2,"",inline = "TP",group = TRGroupName)
Buffer          = input.int(20,"Buffer for SL",tooltip = "For Buy It will be Valid OB Bottom Line Less Buffer and For Sell It will be Valid Bearish OB Upper Line Plus Buffer",group = TRGroupName,inline = "SL")	
SLType          = input.string("Points" ,"", ["Points","Amount"],group = TRGroupName,inline = "SL")

UseBreakEven    = input.bool(false,"Move SL to BE Trigger at",inline = "BE",group = TRGroupName)
RRBE            = input.float(1,"",inline = "BE",group = TRGroupName)
RRBEType        = input.string("RR","",["Points","RR"],inline = "BE",group = TRGroupName)

BreakeEvenTicks = input.float(10,"Lock Profit in ",inline = "BE",group = TRGroupName)
BEType          = input.string("Points","",["Points","RR"],inline = "BE",group = TRGroupName)
UseTrailing         = input.bool(true,"Use Trailing Stop",group = TRGroupName)
TrailingSLTrigger1  = input.float(2,"Trailing SL 1 trigger profit (in RR)",tooltip = "When Profit Reaches to 5, This will trigger TSL1",group = TRGroupName)
TrailingLockin1     = input.float(1,"TSL1 Floating profit Lock-in %",tooltip = "TSL1 will lock 70 % of reached Profit so TSL1 = 7 and 3 will remain in Trailing",group = TRGroupName)
TrailingSLTrigger2  = input.float(4,"Trailing SL 2 trigger profit (in RR)",group = TRGroupName)
TrailingLockin2     = input.float(2,"TSL2 Floating profit Lock-in %",group = TRGroupName)
TrailingSLTrigger3  = input.float(6,"Trailing SL 3 trigger profit (in RR)",group = TRGroupName)
TrailingLockin3     = input.float(4,"TSL3 Floating profit Lock-in %",group = TRGroupName)
TrailingSLTrigger4  = input.float(8,"Trailing SL 4 trigger profit (in RR)",group = TRGroupName)
TrailingLockin4     = input.float(6,"TSL4 Floating profit Lock-in %",group = TRGroupName)
TrailingSLTrigger5  = input.float(12,"Trailing SL 5 trigger profit (in RR)",group = TRGroupName)
TrailingLockin5     = input.float(9,"TSL5 Floating profit Lock-in %",group = TRGroupName)


PnlGroup = "PnL Management"
UseDailyProfit      = input.bool(false,"",group = PnlGroup,inline = "Dprofit")
DailyProfit         = input.float(1000,"Max Allowed Profit Per Day",group = PnlGroup,inline = "Dprofit")
UseDailyLoss        = input.bool(false,"",group = PnlGroup,inline = "Dloss")
DailyLoss           = input.float(-100,"Max Allowed Loss Per Day",group = PnlGroup,inline = "Dloss")
tomaxallowed        = input.bool(false,"",inline = "mallow",group = PnlGroup)
MaxAllowedTrades    = input.int(10,"Max Allowed Trades per day",inline = "mallow",group = PnlGroup)


ColorGroup  = "Display Management"
ShowBarChange   = input.bool(true,"Show Bar Changes on Higher TF",group = ColorGroup)
OBoffset        = input.int(0,"Valid Swing OB offset",group = ColorGroup)
ShowHeading     = input.bool(true,"Show Heading",group = ColorGroup)
bgHcolor        = input.color(color.orange,"Valid High Candle color",group = ColorGroup)
bgLcolor        = input.color(color.aqua,"Valid Low Candle color",group = ColorGroup)

SHBoxcolor   = input.color(color.new(color.purple,80),"Bearish OB Box color",group = ColorGroup)
SLBoxcolor   = input.color(color.new(color.blue,80),"Bullish OB box color",group = ColorGroup)
SHTxtcolor   = input.color(color.purple,"Bearish OB text color",group = ColorGroup)
SLTxtcolor   = input.color(color.blue,"Bullish OB text color",group = ColorGroup)
TextSize     = input.string("auto","Text Size",["auto","tiny","small","normal","large","huge"],group = ColorGroup)
// Choose Instance Finding Entry Session (As per Selected Time Zone)	0:00
UseMonT             = input.bool(false,"",group = "Trading Sessions Management",inline = "MonT",display = display.none)
MonST1              = input.session("0000-0000","Custom Session",group = "Trading Sessions Management",inline = "MonT",display = display.none)
MonST2              = input.session("0000-0000","",group = "Trading Sessions Management",inline = "MonT",display = display.none)
MonST3              = input.session("0000-0000","",group = "Trading Sessions Management",inline = "MonT",display = display.none)
CstColor            = input.color(color.new(#00bcd4, 80),"Custom Session Color",group = "Trading Sessions Management",display = display.none)
//New York

Use_ny = input.bool(true,"Use NY for entry?", group = 'Trading Sessions Management')
showNy = input(true,   'New York', inline = 'ny', group = 'Trading Sessions Management')
nyCss  = input.color(color.new(#ff5d00, 80), '', inline = 'ny', group = 'Trading Sessions Management')

//London Open
Use_ldno = input.bool(true,"Use London open for entry?", group = 'Trading Sessions Management')
showLdno = input(true, 'London Open', inline = 'ldno', group = 'Trading Sessions Management')
ldnoCss  = input.color(color.new(#00bcd4, 80), '', inline = 'ldno', group = 'Trading Sessions Management')

//London Close
Use_ldnc = input.bool(true,"Use London close for entry?", group = 'Trading Sessions Management')
showLdnc = input(true, 'London Close', inline = 'ldnc', group = 'Trading Sessions Management')
ldncCss  = input.color(color.new(#2157f3, 80), '', inline = 'ldnc', group = 'Trading Sessions Management')

//Asian
Use_as      = input.bool(false,"Use Asian for entry?", group = 'Trading Sessions Management')
showAsia    = input(false, 'Asian', inline = 'asia', group = 'Trading Sessions Management')
asiaCss     = input.color(color.new(#e91e63, 80), '', inline = 'asia', group = 'Trading Sessions Management')
eos         = input.bool(true,"Exit Pending Orders out of Selected Session",group = "Trading Sessions Management")
ceos        = input.bool(false,"Exit Positions out of Selected Session",group = "Trading Sessions Management")
//Alerts 
AlertGB = "Alerts"
ValSessHAl   = input.bool(true,"Enable Valid Session High Swing Alert",group = AlertGB)
ValSessH    = input.text_area("Valid Session High Swing Bearish OB Generated","Valid Session High Swing",group = AlertGB)

ValSessLAl   = input.bool(true,"Enable Valid Session Low Swing Alert",group = AlertGB)
ValSessL    = input.text_area("Valid Session Low Swing Bullish OB Generated","Valid Session Low Swing",group = AlertGB)

ValSwHAl   = input.bool(true,"Enable Valid Swing High Alert",group = AlertGB)
ValSwH      = input.text_area("Valid Swing High Bearish OB Generated","Valid Swing High ",group = AlertGB)

ValSwLAl   = input.bool(true,"Enable Valid Swing Low Alert",group = AlertGB)
ValSwL      = input.text_area("Valid Swing Low Bullish OB Generated","Valid Swing Low ",group = AlertGB)


BuyOrder    = input.text_area("Buy Limit Order Triggered and Buy Trade Executed","Buy Order ",group = AlertGB)
SellOrder   = input.text_area("Sell Limit Order Triggered and Sell Trade Executed","Sell Order ",group = AlertGB)
BuyExitOrder= input.text_area("Buy Exit Order Triggered","Buy Exit Order",group = AlertGB)
SellExitOrder= input.text_area("Sell Exit Order Triggered","Sell Exit Order",group = AlertGB)
// BuyMkt      = input.text_area("","Buy Market ",group = AlertGB)
// SellMkt     = input.text_area("","Sell Market ",group = AlertGB)
//FVG
show_fvg = true// input(true, 'Fair Value Gaps (FVG)'
//   , inline = 'fvg_css'
//   , group = 'Fair Value Gaps')

bull_fvg_css = input.color(#2157f3, ''
  , inline = 'fvg_css'
  , group = 'Fair Value Gaps')

bear_fvg_css = input.color(#ff1100, ''
  , inline = 'fvg_css'
  , group = 'Fair Value Gaps')

fvg_usewidth = input(false, 'Min Width'
  , inline = 'fvg_width'
  , group = 'Fair Value Gaps')

fvg_gapwidth = input.float(0, ''
  , inline = 'fvg_width'
  , group = 'Fair Value Gaps')

fvg_method = input.string('Points', ''
  , options = ['Points', '%', 'ATR']
  , inline = 'fvg_width'
  , group = 'Fair Value Gaps')

var fvg_extend =  -2


//----------------------------------------}
//Premium/Discount zones
//----------------------------------------{
show_sd = input(true, 'Premium/Discount Zones'
  , group = 'Premium & Discount Zones')
show_equl = input(true, 'show historical Equilibrium',inline = "equl"
  , group = 'Premium & Discount Zones')
equlcol=input(color.yellow, '',inline = "equl"
  , group = 'Premium & Discount Zones')
len = input.int(50, ''
  , minval = 10
  , inline = 'swings'
  , group = 'Real Time Swing Structure')

premium_css = input.color(#f23645, 'Premium Zone'
  , group = 'Premium & Discount Zones')

eq_css = input.color(#b2b5be, 'Equilibrium Zone'
  , group = 'Premium & Discount Zones')

discount_css = input.color(#089981, 'Discount Zone'
  , group = 'Premium & Discount Zones')
var og_extend = 0





isInSession(sessionTimes) =>
    not na(time(timeframe.period, sessionTimes)) and not (sessionTimes=="0000-0000")
//-----------------------------------------------------------------------------}
//Premium/Discount/Equilibrium zones
//-----------------------------------------------------------------------------{
var premium = box.new(na, na, na, na,xloc=xloc.bar_time
  , bgcolor = color.new(premium_css, 80)
  , border_color = na)
color TRANSP_CSS = #ffffff00
var premium_lbl = label.new(na, na,xloc=xloc.bar_time
  , text = 'Premium'
  , color = TRANSP_CSS
  , textcolor = premium_css
  , style = label.style_label_down
  , size = size.small)

var eq = box.new(na, na, na, na,xloc=xloc.bar_time
  , bgcolor = color.rgb(120, 123, 134, 80)
  , border_color = na)

var eq_lbl = label.new(na, na,xloc=xloc.bar_time
  , text = 'Equilibrium'
  , color = TRANSP_CSS
  , textcolor = eq_css
  , style = label.style_label_left
  , size = size.small)

var discount = box.new(na, na, na, na,xloc=xloc.bar_time
  , bgcolor = color.new(discount_css, 80)
  , border_color = na)

var discount_lbl = label.new(na, na ,xloc=xloc.bar_time
  , text = 'Discount'
  , color = TRANSP_CSS
  , textcolor = discount_css
  , style = label.style_label_up
  , size = size.small)

swings(length)=>
    var os = 0
    
    upper = ta.highest(length)
    lower = ta.lowest(length)

    os := high[length] > upper ? 0 : low[length] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[length] : 0
    btm = os == 1 and os[1] != 1 ? low[length] : 0

    [top, btm] 

getPremium()=>
    var trail_up = high, var trail_dn = low
    var top_y = 0., var top_x = 0
    var btm_y = 0., var btm_x = 0
    var itop_y = 0., var itop_x = 0
    var ibtm_y = 0., var ibtm_x = 0
    var top_cross = true,  var btm_cross = true
    var itop_cross = true, var ibtm_cross = true
    var trend = 0, var itrend = 0
    // var trail_up_x = 0,  var trail_dn_x = 0
    [top, btm] = swings(len)
    
    if(top!=0)
        trail_up := top
        top_x := time[len]
        top_y := top
    trail_up := math.max(high, trail_up)

    if(btm != 0)
        trail_dn := btm
        btm_x := time[len]
        btm_y := btm
    trail_dn := math.min(low, trail_dn)
    //Detect bullish Structure
    if ta.crossover(close, top_y) and top_cross
        top_cross := false
        trend := 1
    //-----------------------------------------------------------------------------}
    //Pivot Low BOS/CHoCH
    //-----------------------------------------------------------------------------{

    //Detect bearish Structure
    if ta.crossunder(close, btm_y) and btm_cross
        btm_cross := false
        trend := -1


    [trail_up,trail_dn,top_x, btm_x]
getTrend()=>
    var trail_up = high, var trail_dn = low
    var top_y = 0., var top_x = 0
    var btm_y = 0., var btm_x = 0
    var itop_y = 0., var itop_x = 0
    var ibtm_y = 0., var ibtm_x = 0
    var top_cross = true,  var btm_cross = true
    var itop_cross = true, var ibtm_cross = true
    var trend = 0, var itrend = 0
    // var trail_up_x = 0,  var trail_dn_x = 0
    [top, btm] = swings(len)
    [itop, ibtm] = swings(5)
    var bull_concordant = true

    if ifilter_confluence
        bull_concordant := high - math.max(close, open) > math.min(close, open - low)
    if(top!=0)
        top_cross := true
        trail_up := top
        top_x := time[len]
        top_y := top
        
    trail_up := math.max(high, trail_up)

    if itop != 0
        itop_cross := true

        itop_y := itop
    if(btm != 0)
        btm_cross := true
        trail_dn := btm
        btm_x := time[len]
        btm_y := btm
    trail_dn := math.min(low, trail_dn)

    if ibtm != 0
        ibtm_cross := true
        ibtm_y := ibtm


    //Detect internal bullish Structure
    if ta.crossover(close, itop_y) and itop_cross and top_y != itop_y and bull_concordant
        itop_cross := false
        itrend := 1

    //Detect bullish Structure
    if ta.crossover(close, top_y) and top_cross
        top_cross := false
        trend := 1
    //-----------------------------------------------------------------------------}
    //Pivot Low BOS/CHoCH
    //-----------------------------------------------------------------------------{
    var bear_concordant = true

    if ifilter_confluence
        bear_concordant := high - math.max(close, open) < math.min(close, open - low)

    //Detect internal bearish Structure
    if ta.crossunder(close, ibtm_y) and ibtm_cross and btm_y != ibtm_y and bear_concordant
        ibtm_cross := false
        itrend := -1
    //Detect bearish Structure
    if ta.crossunder(close, btm_y) and btm_cross
        btm_cross := false
        trend := -1

    (ModeTtype=="NRT_AI_TSMS"?itrend:trend)

var toDefend1=false,var toDefend2 = false   

n = bar_index
[trail_up,trail_dn,top_x, btm_x] = request.security(syminfo.tickerid,HTF,getPremium(),lookahead = barmerge.lookahead_on)
trend = request.security(syminfo.tickerid,ITF,getTrend(),lookahead = barmerge.lookahead_on)

if show_sd
    avg = math.avg(trail_up, trail_dn)

    box.set_lefttop(premium, math.max(top_x, btm_x), trail_up)
    box.set_rightbottom(premium, time, .95 * trail_up + .05 * trail_dn)

    label.set_xy(premium_lbl, int(math.avg(math.max(top_x, btm_x), time)), trail_up)

    box.set_lefttop(eq, math.max(top_x, btm_x), .525 * trail_up + .475*trail_dn)
    box.set_rightbottom(eq, time, .525 * trail_dn + .475 * trail_up)

    label.set_xy(eq_lbl, time, avg)
    
    box.set_lefttop(discount, math.max(top_x, btm_x), .95 * trail_dn + .05 * trail_up)
    box.set_rightbottom(discount, time, trail_dn)
    label.set_xy(discount_lbl, int(math.avg(math.max(top_x, btm_x), time)), trail_dn)

GetQTY(float size)=>
    float qt = switch(QTYType)
        "Risk Per Trade"=>math.abs(AmountAtRisk/(syminfo.pointvalue * size))
        "Fixed Shares"=>AmountAtRisk
        => math.abs(AmountAtRisk*strategy.initial_capital/(100*syminfo.pointvalue * size))
    if(toDefend2)
        qt:= qt/Defend2
    else if(toDefend1)
        qt:= qt/Defend1
    var prs = syminfo.pricescale
    // qt := 39
    qt:=math.floor(qt)
    if(UseLots)
        qt := math.floor(qt*100/prs)
        qt := qt/100  
            
    qt
    
// Mark Pass Fail Mark on Each Trade on Chart 
labels(session, css, txt)=>
    var label lbl = na
    var float max = na 
    var int anchor = na
    var get_css = color.rgb(color.r(css), color.g(css), color.b(css))

    if session and not session[1]
        max := high
        anchor := time
        
        lbl := label.new(anchor, max
          , txt
          , xloc.bar_time
          , color = #ffffff00
          , style = label.style_label_down
          , textcolor = get_css
          , size = size.small)
    
    if session
        max := math.max(high, max)

        label.set_x(lbl, int(math.avg(time, anchor)))
        label.set_y(lbl, max)

////////////////////////////
///Session Definition//////
//////////////////////////
ny        = time(timeframe.period, '0700-0900', 'UTC-5') != 0
ldn_open  = time(timeframe.period, '0200-0500', 'UTC-5') != 0
ldn_close = time(timeframe.period, '1000-1200', 'UTC-5') != 0
asian     = time(timeframe.period, '2000-0000', 'UTC-5') != 0
CustoSessEnable = (UseMonT and (isInSession(MonST1) or isInSession(MonST2)or isInSession(MonST3)))

InSession = (ny and Use_ny) or (ldn_open and Use_ldno) or (ldn_close and Use_ldnc) or (asian and Use_as) or CustoSessEnable

labels(ny and showNy, nyCss, 'New York')
labels(ldn_open and showLdno, ldnoCss, 'London Open')
labels(ldn_close and showLdnc, ldncCss, 'London Close')
labels(asian and showAsia, asiaCss, 'Asian')

bgcolor(ny and showNy ? nyCss : na, editable = false)
bgcolor(ldn_open and showLdno ? ldnoCss : na, editable = false)
bgcolor(ldn_close and showLdnc ? ldncCss : na, editable = false)
bgcolor(asian and showAsia ? asiaCss : na, editable = false)
bgcolor(CustoSessEnable ? CstColor : na, editable = false)
/////////////////////////
/////FVG////////////////
///////////////////////
//Detect imbalance and return count over time
atr = ta.atr(200)

imbalance_detection(show, usewidth, method, width, top, btm, condition)=>
    var is_width = true
    var count = 0

    if usewidth
        dist = top - btm

        is_width := switch method
            'Points' => dist > width
            '%' => dist / btm * 100 > width
            'ATR' => dist > atr * width

    is_true = show and condition and is_width
    count += is_true ? 1 : 0
    
    [is_true, count]
//Detect if bullish imbalance is filled and return count over time
bull_filled(condition, btm)=>
    var btms = array.new_float(0)
    var count = 0

    if condition
        array.unshift(btms, btm)
    
    size = array.size(btms)

    for i = (size > 0 ? size-1 : na) to 0
        value = array.get(btms, i)

        if low < value
            array.remove(btms, i)      
            count += 1 

    count

//Detect if bearish imbalance is filled and return count over time
bear_filled(condition, top)=>
    var tops = array.new_float(0)
    var count = 0
    
    if condition
        array.unshift(tops, top)
    
    size = array.size(tops)
    
    for i = (size > 0 ? size-1 : na) to 0
        value = array.get(tops, i)

        if high > value
            array.remove(tops, i)      
            count += 1 

    count

//-----------------------------------------------------------------------------}
//Fair Value Gaps
//-----------------------------------------------------------------------------{
//Bullish
[bull_fvg, bull_fvg_count] = imbalance_detection(
  show_fvg
  , fvg_usewidth
  , fvg_method
  , fvg_gapwidth
  , low
  , high[2]
  , low > high[2] and close[1] > high[2] )//and not (bull_og or bull_og[1]))

bull_fvg_filled = bull_filled(bull_fvg, high[2])

//Bearish
[bear_fvg, bear_fvg_count] = imbalance_detection(
  show_fvg
  , fvg_usewidth
  , fvg_method
  , fvg_gapwidth
  , low[2]
  , high
  , high < low[2] and close[1] < low[2])// and not (bear_og or bear_og[1]))

bear_fvg_filled = bear_filled(bear_fvg, low[2])

var bullL=array.new<line>(0), var bullbox = array.new<box>(0),var bullin = array.new<int>(0)
var bearL=array.new<line>(0), var bearbox = array.new<box>(0),var bearin = array.new<int>(0)
var line tempLL = na,var tempLI = 0,var box tempLB = na
var line tempSL = na,var tempSI = 0,var box tempSB = na


/////////////////////////
/////Check validity/////
///////////////////////

checkConditions15sym1()=>
    vhc = low[1]>low 
    vlc = high[1]<high 
    [vhc,vlc]
checkConditions15sym2()=>
    vhc = high[1]>high
    vlc = low[1]<low
    [vhc,vlc,bar_index,low]
// [high15,low15] = 
[vhc1,vlc1,index15,l1] = request.security(syminfo.tickerid,tfcs,checkConditions15sym2(),lookahead = barmerge.lookahead_on)
[vhc2,vlc2] = request.security(sym,tfcs,checkConditions15sym1(),lookahead = barmerge.lookahead_on)
// plotshape(vhc1)
// plotshape(vlc1,color = color.red)
validHigh = (vhc1 and vhc2 and InSession)
validLow = (vlc1 and vlc2 and InSession)

var SessHigh = 0., var SessLow = 100000000.
SessHigh := InSession?math.max(SessHigh,high):0.
SessLow := InSession?math.min(SessLow,low):10000000.

if bull_fvg and InSession and not UseFreshFVG //and false
    avg = math.avg(low, high[2])
    tempLL := line.new(n-2, avg, n + fvg_extend, avg, color = bull_fvg_css)
    tempLB := box.new(n-2, low, n + fvg_extend, high[2], border_color = na, bgcolor = color.new(bull_fvg_css, 80))
    tempLI := n
    bullbox.push(tempLB)
    bullL.push(tempLL)
    bullin.push(bar_index)
    
if bear_fvg and InSession and not UseFreshFVG
    avg = math.avg(low[2], high)
    tempSL := line.new(n-2, avg, n + fvg_extend, avg, color = bear_fvg_css)
    tempSB := box.new(n-2, low[2], n + fvg_extend, high, border_color = na, bgcolor = color.new(bear_fvg_css, 80))
    tempSI := n
    bearbox.push(tempSB)
    bearin.push(bar_index)
    bearL.push(tempSL)

var H15 = high,var L15 = low
var BH15 = 0,var BL15 = 0,var bt = 0
var line prevHl = na, var line prevLl = na
var bordHcolor = color.new(SHBoxcolor,0)
var bordLcolor = color.new(SLBoxcolor,0)
var fixBI = 0,var fixSI = 0
var HighStop = 100000.,var LowStop = 0.
changed = index15!=index15[1]
// bt := BL15-bar_index
// bgcolor(changed?color.red:na,bt)
itisrem = false

// if(not validHigh and not changed )
//     line.delete(prevHl)
//     prevHl := na
//     // bearbox.clear()
//     // bearL.clear()
// if(not validLow and not changed )
//     line.delete(prevLl)
//     prevLl := na
    // bullbox.clear()
    // bullL.clear()
    // itisrem := true

tick = syminfo.minmove/syminfo.pricescale
type Order
    box tp 
    box sl 
    // float ob
    bool islong
    bool isact

var orderbox = array.new<Order>(0)
var BullOB = array.new<float>(0)
var BearOB = array.new<float>(0)
var ImBuy = false, var ImSell = false
var OBL = 0., var OBH = 0.
var SLB = 0.,var TPB = 0.
var SLS = 0., var TPS = 0.
var isStxtL = false, var isStxtS = false
// var EnableLlimit = false,var EnableSlimit = false
var HOK =true,var LOK = true
MakeTPSL(float SL,float EP, int dir)=>
    // line.new(bar_index,0,bar_index,100000000,color = bgSLcolor,width = 10)
    var transpcol = color.new(color.red,100)
    var TP = 0.
    if(dir == 1)
        TP := EP +  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(EP-SL)))
        orderbox.push(Order.new(box.new(bar_index,TP,bar_index,EP,na,extend = extend.right,bgcolor = color.new(color.green,70))
           ,box.new(bar_index,EP,bar_index,SL,na,extend = extend.right,bgcolor = color.new(color.red,70)),true,false))

    else
        TP := EP -  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(SL-EP)))
        orderbox.push(Order.new(box.new(bar_index,EP,bar_index,TP,na,extend = extend.right,bgcolor = color.new(color.green,70)),
           box.new(bar_index,SL,bar_index,EP,na,extend = extend.right,bgcolor = color.new(color.red,70)),false,false))
    sll = SL
    tpp = TP
    label.new(time,tpp,"TP: "+str.tostring(tpp,format.mintick),xloc.bar_time,yloc.price,transpcol,dir==1?label.style_label_down:label.style_label_up,color.green,size.normal,text.align_right)
    label.new(time,sll,"SL: "+str.tostring(sll,format.mintick),xloc.bar_time,yloc.price,transpcol,dir==-1?label.style_label_down:label.style_label_up,color.red,size.normal,text.align_right)
    label.new(time,EP,"EP: "+str.tostring(EP,format.mintick) + "\nQTY: "+str.tostring(GetQTY(EP-SL),"#.##"),xloc.bar_time,yloc.price,transpcol,label.style_none,color.yellow,size.normal,text.align_left)


getFVGVal(box bbc,bool isbull)=>
    retval = 0.
    if(FVGVal == "Average of Both")
        retval := (bbc.get_top()+bbc.get_bottom())/2
    else if(FVGVal == "FVG Box Start Value" and isbull) or (FVGVal == "FVG Generation Price" and not isbull)
        retval := bbc.get_bottom()
    else 
        retval := bbc.get_top()
    retval

getTextSize(tsz)=>
    ssz = size.auto
    ssz:=switch(tsz)
        "auto"=>size.auto
        "tiny"=>size.tiny
        "small"=>size.small
        "normal"=>size.normal
        "large"=>size.large
        "hughe"=>size.huge
    ssz


if(changed)
    // 
    if(not validHigh[1])
        line.delete(prevHl)
        prevHl := na
    if(not validLow[1] )
        line.delete(prevLl)
        prevLl := na
    if(ShowBarChange and InSession)
        line.new(bar_index,0,bar_index,100000000)
    ImBuy := false
    ImSell := false
    if(not na(prevHl))
        ix = bar_index - prevHl.get_x1()
        bb = box.new(prevHl.get_x1(),high[ix],bar_index+OBoffset,low[ix],bordHcolor,bgcolor = SHBoxcolor,text_color = SHTxtcolor,text_valign = text.align_center,text_halign = text.align_center )
        txt = isStxtL?"Valid Session High Swing Bearish OB":"Valid Swingh High Bearish OB"
        if(ShowHeading) 
            box.set_text(bb,txt)
            box.set_text_size(bb,getTextSize(TextSize))
        // log.info("----------------------")
        if(ValSessHAl and isStxtL) or (ValSwHAl and not isStxtL)
            alert(isStxtL?ValSessH:ValSwH,alert.freq_once_per_bar)
        EP = 0.
        count = 0
        if(ShortAllowed)
            if(bearbox.size()>0 and not UseFreshFVG)
                thefirst = 0.
                for x = bearbox.size()-1 to 0
                    if(bearin.get(x)<=prevHl.get_x1())
                        break
                    bearbox.get(x).set_right(bar_index)
                    bearL.get(x).set_x2(bar_index)
                    thefirst := getFVGVal(bearbox.get(x),false)
                    EP+=thefirst
                    count+=1
                if(count == 0)
                    ImSell := true
                    BearOB.push(high[ix])
                    
                    if(FreshType == "Market")
                        SLS := high[ix] + (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                        OBH := high[ix]
                else
                    EP := EP/count
                    if(FVGType == "First")
                        EP := thefirst
                    else if(FVGType == "Last")
                        EP := getFVGVal(bearbox.last(),false)
                    // EnableSlimit := true
                    EP-=FVGBuffer*tick
                    MakeTPSL(high[ix] + (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,-1)
            else 
                ImSell := true
                BearOB.push(high[ix])
                
                if(FreshType == "Market")
                    SLS := high[ix] + (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                    OBH := high[ix]
            log.info("----------------------\n"+txt+"\nNon Mittigated Bearish FVG Zones : "+str.tostring(count)+"\nCurrent position size : "+str.tostring(strategy.position_size))
            
    if(not na(prevLl))
        ix = bar_index - prevLl.get_x1()
        bb =box.new(prevLl.get_x1(),high[ix],bar_index+OBoffset,low[ix],bordLcolor,bgcolor = SLBoxcolor,text_color = SLTxtcolor,text_valign = text.align_center,text_halign = text.align_center)
        txt = isStxtS?"Valid Session Low Swing Bullish OB":"Valid Swingh Low Bullish OB"
        if(ShowHeading)
            box.set_text(bb,txt)
            box.set_text_size(bb,getTextSize(TextSize))

        EP = 0.

        if(ValSessLAl and isStxtS) or (ValSwLAl and not isStxtS)
            alert(isStxtS?ValSessL:ValSwL,alert.freq_once_per_bar)
        if(LongAllowed)
            count = 0
            thefirst = 0.
            if(bullbox.size()>0 and not UseFreshFVG)
                for x = bullbox.size()-1 to 0
                    if(bullin.get(x)<=prevLl.get_x1())
                        break
                    bullbox.get(x).set_right(bar_index)
                    bullL.get(x).set_x2(bar_index)
                    thefirst := getFVGVal(bullbox.get(x),true)
                    EP+=thefirst
                    
                    count+=1
                if(count == 0)
                    ImBuy := true
                    BullOB.push(low[ix])

                    if(FreshType == "Market")
                        SLB := low[ix] - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                        OBL := low[ix] 
                else
                    EP := EP/count
                    if(FVGType == "First")
                        EP := thefirst
                    else if(FVGType == "Last")
                        EP := getFVGVal(bullbox.last(),true)
                    EP+=FVGBuffer*tick
                    // bullbox.clear()
                    MakeTPSL(low[ix] - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,1)
            else 
                ImBuy := true
                BullOB.push(low[ix])

                if(FreshType == "Market")
                    SLB := low[ix] - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
                    OBL := low[ix] 
            log.info("----------------------\n"+txt+"\nNon Mittigated Bullish FVG Zones : "+str.tostring(count)+"\nCurrent position size : "+str.tostring(strategy.position_size))
            
    // bullbox.clear()
    // bearbox.clear()
    // bullL.clear()
    // bearL.clear()
    isStxtL := (UseSessionHighSwing and high[bar_index-BH15]>= SessHigh)            
    prevHl := close[bar_index-BH15]>open[bar_index-BH15] and InSession[bar_index-BH15] and HOK and
       ((UseSessionHighSwing and high[bar_index-BH15]>= SessHigh)or(UseHighSwing and high[bar_index-BH15]<SessHigh))?
       line.new(BH15,0,BH15,100000000,color = (UseSessionHighSwing and high[bar_index-BH15]>= SessHigh)?bgSHcolor:bgSWHcolor,width = 10):na
    isStxtS := (UseSessionLowSwing and low[bar_index-BL15]<= SessLow)
    prevLl := close[bar_index-BL15]<open[bar_index-BL15] and InSession[bar_index-BL15] and LOK and
       ((UseSessionLowSwing and low[bar_index-BL15]<= SessLow)or(UseLowSwing and low[bar_index-BL15]>SessLow))?
       line.new(BL15,0,BL15,100000000,color = (UseSessionLowSwing and low[bar_index-BL15]<= SessLow)?bgSLcolor:bgSWLcolor,width = 10):na
    H15 := 0.
    BH15:= bar_index
    L15 := 1000000000.
    BL15 :=bar_index
if(high >= OBH)
    ImBuy := false
if(low <= OBL)
    ImSell := false
if(high == H15)
    HOK:=false
if(low == L15)
    LOK:=false
if(high > H15)
    H15 := high
    BH15:= bar_index
    HOK := true
if(low < L15)
    L15 := low
    BL15 :=bar_index  
    LOK := true

if(eos and not InSession)
    if(orderbox.size()>0)
        for x = 0 to orderbox.size()-1
            orderbox.get(x).tp.set_extend(extend.none)
            orderbox.get(x).tp.set_right(bar_index)
            orderbox.get(x).sl.set_extend(extend.none)
            orderbox.get(x).sl.set_right(bar_index)
        orderbox.clear()
    BullOB.clear()
    BearOB.clear()
if(BullOB.size() > 0)
    shift = 0
    for y = 0 to BullOB.size()-1
        x = y-shift
        if(low <= BullOB.get(x))
            shift+=1
            BullOB.remove(x)
if(BearOB.size() > 0)
    shift = 0
    for y = 0 to BearOB.size()-1
        x = y-shift
        if(high >= BearOB.get(x))
            shift+=1
            BearOB.remove(x)
if(BullOB.size() > 0 and bull_fvg)
    v1 = low
    av = (low+high[2])/2
    v2 = high[2]
    tempLL := line.new(n-2, av, n, av, color = bull_fvg_css)
    tempLB := box.new(n-2, low, n, high[2], border_color = na, bgcolor = color.new(bull_fvg_css, 80))
    tempLI := n
    if(FreshType == "Limit")

        EP = FVGVal == "Average of Both"?av:(FVGVal == "FVG Box Start Value"?v2:v1)+FVGBuffer*tick

        MakeTPSL(BullOB.first()- (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,1)
    BullOB.remove(0)
if(BearOB.size() > 0 and bear_fvg)
    v1 = high
    av = (low[2]+high)/2
    v2 = low[2]
    tempSL := line.new(n-2, av, n, av, color = bear_fvg_css)
    tempSB := box.new(n-2, low[2], n, high, border_color = na, bgcolor = color.new(bear_fvg_css, 80))
    tempSI := n
    if(FreshType == "Limit")
        EP = FVGVal == "Average of Both"?av:(FVGVal == "FVG Box Start Value"?v2:v1)-FVGBuffer*tick
        MakeTPSL(BearOB.first()+ (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue))),EP,-1)
    BearOB.remove(0)
// ValidSH = InSession and not na(HS) and close[SwingRange]>open[SwingRange] and (high[SwingRange] > SessHigh[SwingRange+1] or not UseSessionHighSwing)
// ValidSL = InSession  and not na(LS) and close[SwingRange]<open[SwingRange] and (low[SwingRange] < SessLow[SwingRange+1] or not UseSessionLowSwing)

barcolor(validHigh?bgHcolor:validLow?bgLcolor:na)
if(bearbox.size()>0)
    shift = 0
    for y = 0 to bearbox.size()-1
        x = y-shift
        temp = bearbox.get(x)
        if(high >= temp.get_top())
            if(temp.get_left() == temp.get_right())
                temp.delete()
                bearL.get(x).delete()
            bearbox.remove(x) 
            bearL.remove(x)
            bearin.remove(x)
            shift += 1
            itisrem :=true
if(bullbox.size()>0)
    shift = 0
    for y = 0 to bullbox.size()-1
        x = y-shift
        temp = bullbox.get(x)
        if(low <= temp.get_bottom())
            if(temp.get_left() == temp.get_right())
                temp.delete()
                bullL.get(x).delete()
            bullbox.remove(x) 
            bullL.remove(x)
            bullin.remove(x)
            shift += 1
            itisrem :=true

avgB = 0.
avgS = 10000000000.
var fixAvgS = 0.
var fixAvgB = 0.
//////////////////////////
////Entries//////////////
////////////////////////
ImSell  := BearOB.size() > 0
ImBuy   := BullOB.size() > 0 
var FixClosedTrades = 0
var fixDailyNet = 0.
if(dayofmonth(time)!=dayofmonth(time[1]))
    FixClosedTrades := strategy.closedtrades
    fixDailyNet := strategy.netprofit

EnableSlimit = false
EnableLlimit = false
var lastOindexB = -1
var lastOindexS = -1
if(orderbox.size()>0 )
    isthereact = false
    for x = 0 to orderbox.size()-1
        Order tmp = orderbox.get(x)
        if(tmp.isact)
            isthereact := true
            break
    shift = 0
    for y = 0 to orderbox.size()-1
        x = y - shift
        Order tmp = orderbox.get(x)
        // if(tmp.islong and high >=tmp.sl.get_top() and low<=tmp.sl.get_top()) or (not tmp.islong and high >=tmp.tp.get_top() and low<=tmp.tp.get_top())
        //     tmp.isact := true
        if ((tmp.isact and strategy.position_size ==0) or (tmp.islong and low <= tmp.sl.get_bottom()) or (not tmp.islong and high >= tmp.sl.get_top()))
            shift+=1
            tmp.tp.set_extend(extend.none)
            tmp.tp.set_right(bar_index)
            tmp.sl.set_extend(extend.none)
            tmp.sl.set_right(bar_index)
            orderbox.remove(x)
        else if(strategy.position_size == 0)
            if(tmp.islong and not ImBuy and not tmp.isact)
                EnableLlimit := true
                if(avgB < tmp.sl.get_top())
                    lastOindexB := x
                    avgB := tmp.sl.get_top()
                    SLB := tmp.sl.get_bottom()
                    TPB := tmp.tp.get_top()
            if(not tmp.islong and not ImSell  and not tmp.isact)
                EnableSlimit := true
                if(avgS > tmp.sl.get_bottom())
                    lastOindexS := x
                    avgS:= tmp.sl.get_bottom()
                    SLS := tmp.sl.get_top()
                    TPS := tmp.tp.get_bottom()
        if not isthereact and ((tmp.islong and low<=tmp.sl.get_top() and strategy.position_size > 0) or (not tmp.islong and high >=tmp.tp.get_top() and strategy.position_size<0))
            tmp.isact := true
            isthereact := true


TDNet = strategy.netprofit - fixDailyNet
var ismagB = false, var ismagS = false
strategy.cancel_all()
var MagSLS = 0.,var MagSLB = 0.
if((MaxAllowedTrades > strategy.closedtrades - FixClosedTrades or not tomaxallowed) and ( TDNet < DailyProfit or not UseDailyProfit ) and (TDNet > DailyLoss or not UseDailyLoss)) and strategy.position_size == 0
    avt = math.avg(trail_up,trail_dn)
    ep = math.min(close,avgB)
    con1 = (not ModeT or trend == 1)
    con2 = (not ModeL or ep <= avt ) 
    notcancel = false
    if(con1 and con2)
        if(strategy.position_size == 0)
            ismagS := false 
            if(ImBuy and bull_fvg and InSession and SLB<close and FreshType == "Market" and BullOB.size()>0) 
                BullOB.remove(0) 
                strategy.entry("Buy",strategy.long,GetQTY(close-SLB),comment = "FreshFVG Buy",alert_message = BuyOrder) 
                fixAvgB := close
                ImBuy := false
            else if(LongAllowed and EnableLlimit and avgB > SLB)
                strategy.entry("Buy",strategy.long,GetQTY(avgB-SLB),avgB,alert_message = BuyOrder)
                fixAvgB := avgB
            else 
                strategy.cancel("Buy")    
    else //if not(ImBuy and bull_fvg and InSession)
        if(high>=avgB and low <= avgB)
            log.info("---------------------")
            if(not con1)
                log.error("last Structure is Bearish ")
            if(not con2)
                log.error("Entry price is in Premium zone")
        if(avgB != 0) and ((MagModeTL and not con1 and not con2) or (MagModeT and not con1) or ( MagModeL and not con2))and strategy.position_size == 0
            strategy.entry("Sell",strategy.short,GetQTY(avgB-SLB),comment = "Magic Sell",stop = avgB,alert_message = SellOrder)
            MagSLS := avgB+(avgB-SLB)
            ismagS := true 
            notcancel := true 
        

        strategy.cancel("Buy")      
    ep := math.max(close,avgS)
    con1 := (not ModeT or trend == -1)
    con2 := (not ModeL or ep >= avt)
    if(con1 and con2) 
        if(strategy.position_size == 0)
            ismagB := false
            if(ImSell and bear_fvg and InSession and SLS > close and FreshType == "Market" and BearOB.size()>0)  
                BearOB.remove(0)
                strategy.entry("Sell",strategy.short,GetQTY(SLS-close),comment = "FreshFVG Sell",alert_message = SellOrder)     
                ImSell:=false             
                ismagS := false
                fixAvgS := close
            else if(ShortAllowed and orderbox.size()>0 and EnableSlimit and avgS < SLS)
                strategy.entry("Sell",strategy.short,GetQTY(SLS-avgS),avgS,alert_message = SellOrder)
                fixAvgS := avgS
            else if(not notcancel)
                strategy.cancel("Sell") 
    else// if not(ImSell and bear_fvg and InSession) 
        if(high>=avgS and low <= avgS)
            log.info("---------------------")
            if(not con1)
                log.error("last Structure is Bullish ")
            if(not con2)
                log.error("Entry price is in Discount zone") 
        if(avgS != 0) and ((MagModeTL and not con1 and not con2) or (MagModeT and not con1) or ( MagModeL and not con2))and strategy.position_size == 0
            strategy.entry("Buy",strategy.long,GetQTY(SLS-avgS),comment = "Magic Buy",stop = avgS,alert_message = BuyOrder)
            MagSLB := avgS-(SLS-avgS)
            ismagB := true
        if(not notcancel)
            strategy.cancel("Sell")                 
if(strategy.position_avg_price>=math.min(avgS[1],avgS) and strategy.position_size[1]==0)
    ismagS:=false
if(strategy.position_avg_price<=math.max(avgB[1],avgB) and strategy.position_size[1]==0)
    ismagB:=false
if(ismagS and strategy.position_size < 0 and lastOindexB != -1 and orderbox.size()>lastOindexB)
    Order tmp = orderbox.get(lastOindexB)
    tmp.tp.set_extend(extend.none)
    tmp.tp.set_right(bar_index)
    tmp.sl.set_extend(extend.none)
    tmp.sl.set_right(bar_index)
    orderbox.remove(lastOindexB)
    lastOindexB := -1

if(ismagB and strategy.position_size > 0 and lastOindexS != -1 and orderbox.size()>lastOindexS)
    Order tmp = orderbox.get(lastOindexS)
    tmp.tp.set_extend(extend.none)
    tmp.tp.set_right(bar_index)
    tmp.sl.set_extend(extend.none)
    tmp.sl.set_right(bar_index)
    orderbox.remove(lastOindexS)
    lastOindexS := -1


var ActivateBE = false
var barssinceentry = 0
Tp1 = 0., Sl1 = 0.

if(strategy.position_size == 0)
    ActivateBE := false 

else if(strategy.position_size[1]==0)
    barssinceentry := bar_index
tpp = 0.
sll = 0.

var ActivateTrail = 0
var TrailingPlace = 0.

if(strategy.position_size == 0)
    ActivateTrail := 0
    TrailingPlace := 0
else if(strategy.position_size > 0)
    avg = strategy.position_avg_price
    SL11 = ismagB?MagSLB:SLB
    RRsize = (avg - SL11)
    if(barssinceentry>bar_index)

        if(high > avg + RRsize*TrailingSLTrigger1 and ActivateTrail < 2)
            ActivateTrail := 1
        if(high > avg + RRsize*TrailingSLTrigger2 and ActivateTrail < 3)
            ActivateTrail := 2
        if(high > avg + RRsize*TrailingSLTrigger3 and ActivateTrail < 4)
            ActivateTrail := 3
        if(high > avg + RRsize*TrailingSLTrigger4 and ActivateTrail < 5)
            ActivateTrail := 4
        if(high > avg + RRsize*TrailingSLTrigger5 and ActivateTrail < 6)
            ActivateTrail := 5
    if(ActivateTrail > 0 and UseTrailing)
        Tplace=0.
        Tsize = high - avg
        if(ActivateTrail == 1)
            Tplace := avg + Tsize*TrailingLockin1/100
        if(ActivateTrail == 2)
            Tplace := avg + Tsize*TrailingLockin2/100
        if(ActivateTrail == 3)
            Tplace := avg + Tsize*TrailingLockin3/100
        if(ActivateTrail == 4)
            Tplace := avg + Tsize*TrailingLockin4/100
        if(ActivateTrail == 5)
            Tplace := avg + Tsize*TrailingLockin5/100
        TrailingPlace := TrailingPlace<Tplace?Tplace:TrailingPlace
else if(strategy.position_size < 0)
    avg = strategy.position_avg_price
    SL11 = ismagS?MagSLS:SLS
    RRsize = (SL11 - avg)
    if(barssinceentry>bar_index)
        if(low < avg - RRsize*TrailingSLTrigger1 and ActivateTrail < 2)
            ActivateTrail := 1
        if(low < avg - RRsize*TrailingSLTrigger2 and ActivateTrail < 3)
            ActivateTrail := 2
        if(low < avg - RRsize*TrailingSLTrigger3 and ActivateTrail < 4)
            ActivateTrail := 3
        if(low < avg - RRsize*TrailingSLTrigger4 and ActivateTrail < 5)
            ActivateTrail := 4
        if(low < avg - RRsize*TrailingSLTrigger5 and ActivateTrail < 6)
            ActivateTrail := 5
    if(ActivateTrail > 0 and UseTrailing)
        Tplace=0.
        Tsize = avg - low
        if(ActivateTrail == 1)
            Tplace := avg - Tsize*TrailingLockin1/100
        if(ActivateTrail == 2)
            Tplace := avg - Tsize*TrailingLockin2/100
        if(ActivateTrail == 3)
            Tplace := avg - Tsize*TrailingLockin3/100
        if(ActivateTrail == 4)
            Tplace := avg - Tsize*TrailingLockin4/100
        if(ActivateTrail == 5)
            Tplace := avg - Tsize*TrailingLockin5/100
        TrailingPlace := TrailingPlace>Tplace or TrailingPlace == 0?Tplace:TrailingPlace

var bool isTradeClosed = false
var string tradeSignalType = ''

handleTradeClosure(signalType, entryPrice, takeProfit, stopLoss, lossComment) =>
    var int entryBarIndex = na
    if (strategy.position_size != 0 and na(entryBarIndex))
        entryBarIndex := bar_index
    if (strategy.position_size == 0)
        entryBarIndex := na

    tradeProfit = strategy.netprofit // Net profit or loss
    profitStatus = tradeProfit > 0 ? "Profit" : "Loss" // Status of trade
    runUp = signalType == "Buy" ? (ta.highest(high, bar_index - entryBarIndex) - entryPrice) : (entryPrice - ta.lowest(low, bar_index - entryBarIndex))
    drawDown = signalType == "Buy" ? (entryPrice - ta.lowest(low, bar_index - entryBarIndex)) : (ta.highest(high, bar_index - entryBarIndex) - entryPrice)
    runUpPerc = runUp / entryPrice * 100
    drawDownPerc = drawDown / entryPrice * 100

    // Calculate Risk and Reward
    risk = math.abs(entryPrice - stopLoss) // Risk is the distance between entry and SL
    reward = math.abs(takeProfit - entryPrice) // Reward is the distance between entry and TP

    // Webhook JSON message
    jsonFormat = "{{\"SignalType\": \"{0}\", \"DateTime\": \"{1}\", \"EntryPrice\": \"{2}\", \"ProfitStatus\": \"{3}\", \"ProfitValue\": \"{4}\", \"RunUp\": \"{5}\", \"RunUpPercent\": \"{6}\", \"DrawDown\": \"{7}\", \"DrawDownPercent\": \"{8}\", \"TakeProfit\": \"{9}\", \"StopLoss\": \"{10}\", \"Risk\": \"{11}\", \"Reward\": \"{12}\", \"Comment\": \"{13}\"}}"
    message = str.format(jsonFormat, signalType, str.tostring(time, "yyyy-MM-dd HH:mm:ss"), str.tostring(entryPrice), profitStatus, str.tostring(tradeProfit), str.tostring(runUp), str.tostring(runUpPerc), str.tostring(drawDown), str.tostring(drawDownPerc), str.tostring(takeProfit), str.tostring(stopLoss), str.tostring(risk), str.tostring(reward), lossComment)

    // Trigger alert to send webhook
    alert(message, freq = alert.freq_once_per_bar)






if(strategy.position_size>0)
    // StL = LowStop - (SLType=="Points"?Buffer*tick:(Buffer/(Shares*syminfo.pointvalue)))
    // TpL = strategy.position_avg_price +  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(strategy.position_avg_price-StL)))
    StL = ismagB?MagSLB:(fixAvgB-(strategy.position_avg_price-SLB))
    EP  = strategy.position_avg_price
    TPVal1 = ismagB?MagTP:TPVal
    TpL = EP +  (TPType == "Points"?TPVal1*tick:(TPType=="Amount"?TPVal1/(syminfo.pointvalue*Shares):TPVal1*(EP-StL)))
    tpp := TpL
    sll := StL
    if(UseBreakEven and high > strategy.position_avg_price + (RRBEType=="RR"?RRBE*(strategy.position_avg_price-StL):RRBE*tick) and bar_index > barssinceentry)
        ActivateBE:=true
    if(ActivateBE)
        StL := EP+(BEType == "Points"?tick*BreakeEvenTicks:(EP-SLB)*BreakeEvenTicks)
    
    cmloss = ActivateBE?"Break Even":"Stop Loss"
    if(StL < TrailingPlace and TrailingPlace != 0)
        StL := TrailingPlace
        cmloss := "Trailing Stop"
    strategy.exit("LE","Buy",limit = TpL,stop = StL,comment_loss = cmloss,comment_profit = "Take Profit",alert_message = BuyExitOrder)
    if (strategy.position_size == 0 and not isTradeClosed)
        isTradeClosed := true
        tradeSignalType := "Buy"  // Set trade type for Buy positions
        // Call handleTradeClosure for Buy
        handleTradeClosure(tradeSignalType, EP, tpp, sll, cmloss)
    

if(strategy.position_size<0)
    // StL = temp.size()>0?SLBox.get(0).get_top():0
    // TpL = strategy.position_avg_price -  (TPType == "Points"?TPVal*tick:(TPType=="Amount"?TPVal/(syminfo.pointvalue*Shares):TPVal*(StL-strategy.position_avg_price)))
    StL = ismagS?MagSLS:(strategy.position_avg_price+(SLS-fixAvgS))
    EP = strategy.position_avg_price
    TPVal1 = ismagS?MagTP:TPVal
    TpL = EP -  (TPType == "Points"?TPVal1*tick:(TPType=="Amount"?TPVal1/(syminfo.pointvalue*Shares):TPVal1*(StL-EP)))
    tpp := TpL
    sll := StL
    if(UseBreakEven and low < strategy.position_avg_price - (RRBEType=="RR"?RRBE*(StL - strategy.position_avg_price):RRBE*tick) and bar_index > barssinceentry)
        ActivateBE:=true
    if(ActivateBE)
        StL := EP - (BEType=="Points"?tick*BreakeEvenTicks:(SLS-EP)*BreakeEvenTicks)
    
    cmloss = ActivateBE?"Break Even":"Stop Loss"
    if(StL > TrailingPlace and TrailingPlace != 0)
        StL := TrailingPlace
        cmloss := "Trailing Stop"
    strategy.exit("SE","Sell",limit = TpL,stop = StL,comment_loss = cmloss,comment_profit = "Take Profit",alert_message = SellExitOrder )
    if (strategy.position_size == 0 and not isTradeClosed)
        isTradeClosed := true
        tradeSignalType := "Sell"  // Set trade type for Sell positions
        // Call handleTradeClosure for Sell
        handleTradeClosure(tradeSignalType, EP, tpp, sll, cmloss)
    


if(ceos and not InSession and strategy.position_size != 0)
    strategy.close_all("Session end",alert_message = (strategy.position_size>0?BuyExitOrder:SellExitOrder))

plot(tpp,"Take Profit",tpp==0 or tpp[1] == 0?na:color.green,1)
plot(sll,"Stop Loss",sll==0 or sll[1] == 0?na:color.red,1)

plot(show_equl?math.avg(trail_up,trail_dn):na,"",equlcol) 



/////////////////////////
////Table///////////////
///////////////////////
var prevNet = 0., var Loss = 0,var LossAmount=0.,var CW=0,var CL=0,var maxCW=0,var maxCL=0
var pnlarr = array.new_bool(0)
if(strategy.netprofit > strategy.netprofit[1])
    CW+=1
    CL := 0
    pnlarr.push(true)
    if(strategy.netprofit>=0)
        toDefend1 := false
        toDefend2 := false
if(strategy.netprofit < strategy.netprofit[1])
    Loss+=1
    LossAmount+=strategy.netprofit-strategy.netprofit[1]
    toDefend1 := UseDefend1
    if(pnlarr.size()>0 and not toDefend2)
        toDefend2 := UseDefend2 and not pnlarr.last()
    pnlarr.push(false)
    CL+=1
    CW := 0
maxCL := math.max(maxCL,CL)
maxCW := math.max(maxCW,CW)

if(bar_index >= last_bar_index-1)
    var tab = table.new(position.top_right,3,12,na)
    var tabcolor = color.gray
    var TabPos = position.middle_center
    var decTab = true
    if(decTab)
        decTab := false 
        if(TabPlace=="top left")
            TabPos := position.top_left
        else if(TabPlace == "top center")
            TabPos := position.top_center
        else if(TabPlace == "top right")
            TabPos := position.top_right
        else if(TabPlace=="middle left")
            TabPos := position.middle_left
        else if(TabPlace == "middle center")
            TabPos := position.middle_center
        else if(TabPlace == "middle right")
            TabPos := position.middle_right
        else if(TabPlace=="bottom left")
            TabPos := position.bottom_left
        else if(TabPlace == "bottom center")
            TabPos := position.bottom_center
        else if(TabPlace == "bottom right")
            TabPos := position.bottom_right
    var bgtx = table.new(TabPos,1,1,na,na,na,na,na)
    bgtx.cell(0,0,BackgorundTx,20,20,color.gray,text.align_center,text.align_center,size.huge)
    table.cell(tab,0,0,"Symbol",text_color = tabcolor,text_halign = text.align_left ) 	
    table.cell(tab,0,1,"No of Trades",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,2,"Total Trade Closed",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,3,"Win Trade Count",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,4,"Loss Trade Count",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,5,"Win Rate %",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,6,"Net Profit",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,7,"Gross Profit",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,8,"Gross Loss",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,9,"Profit Factor",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,10,"Max Consecutive Win",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,0,11,"Max Consecutive Loss",text_color = tabcolor,text_halign = text.align_left ) 	

    table.cell(tab,1,0,syminfo.ticker,text_color = tabcolor,text_halign = text.align_left ) 	
    table.cell(tab,1,1,str.tostring(strategy.closedtrades),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,2,str.tostring(strategy.closedtrades),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,3,str.tostring(strategy.closedtrades-Loss),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,4,str.tostring(Loss),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,5,str.tostring(100*(strategy.closedtrades-Loss)/strategy.closedtrades,"#.##")+"%",text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,6,str.tostring(strategy.netprofit,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,7,str.tostring(strategy.netprofit-LossAmount,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,8,str.tostring(LossAmount,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,9,str.tostring(-(strategy.netprofit-LossAmount)/LossAmount,"#.##"),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,10,str.tostring(maxCW),text_color = tabcolor,text_halign = text.align_left ) 		
    table.cell(tab,1,11,str.tostring(maxCL),text_color = tabcolor,text_halign = text.align_left ) 		

